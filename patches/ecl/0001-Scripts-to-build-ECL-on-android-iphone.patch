From 58de115e9824fbc8c1471d0faf4c5bbe25715888 Mon Sep 17 00:00:00 2001
From: Sylvain Ageneau <ageneau@gmail.com>
Date: Mon, 4 Apr 2011 19:57:38 -0300
Subject: [PATCH 1/8] Scripts to build ECL on android/iphone

---
 configure_cross                           | 101 ++++++++++++++++++++++++++++++
 configure_gmp_cross                       |  83 ++++++++++++++++++++++++
 iPhone_universal                          |  37 +++++++++++
 make_all                                  |  36 +++++++++++
 platforms/android/config.sh               |  85 +++++++++++++++++++++++++
 platforms/android/cross_config.in         |  64 +++++++++++++++++++
 platforms/androidx86/cross_config.in      |  64 +++++++++++++++++++
 platforms/iPhoneOS/config.sh              |  19 ++++++
 platforms/iPhoneOS/cross_config.in        |  64 +++++++++++++++++++
 platforms/iPhoneSimulator/config.sh       |  19 ++++++
 platforms/iPhoneSimulator/cross_config.in |  64 +++++++++++++++++++
 scripts.conf                              |   3 +
 12 files changed, 639 insertions(+)
 create mode 100755 configure_cross
 create mode 100755 configure_gmp_cross
 create mode 100755 iPhone_universal
 create mode 100644 make_all
 create mode 100755 platforms/android/config.sh
 create mode 100644 platforms/android/cross_config.in
 create mode 100644 platforms/androidx86/cross_config.in
 create mode 100755 platforms/iPhoneOS/config.sh
 create mode 100644 platforms/iPhoneOS/cross_config.in
 create mode 100755 platforms/iPhoneSimulator/config.sh
 create mode 100644 platforms/iPhoneSimulator/cross_config.in
 create mode 100644 scripts.conf

diff --git a/configure_cross b/configure_cross
new file mode 100755
index 0000000..05d2994
--- /dev/null
+++ b/configure_cross
@@ -0,0 +1,101 @@
+#!/bin/bash
+
+usage()
+{
+    echo "Usage: `basename $0` platform"
+    echo ""
+    echo " platform    -- one of: host, iPhoneOS, iPhoneSimulator, android, androidx86"
+}
+
+[ $# == 1 ] || { usage; exit 1; }
+
+
+platform=$1
+ECLROOT=$(cd $(dirname ${0}) && pwd -P)
+
+#include the variable definitions 
+. $ECLROOT/scripts.conf
+GMP_INSTALL_DIR=$GMP_INSTALL_ROOT_DIR/$platform
+ECL_INSTALL_DIR=$ECL_INSTALL_ROOT_DIR/$platform
+
+template_config=platforms/$platform/cross_config.in
+srcdir=$ECLROOT/src
+ecl_to_run=$ECL_INSTALL_ROOT_DIR/host/bin/ecl
+host_platform=$($ECLROOT/src/config.guess)
+
+builddir=$ECLROOT/build/$platform/ecl
+
+if [ ! -d ${builddir} ] ; then
+    echo Creating directory "\`${builddir}'"
+    mkdir -p ${builddir}
+fi
+
+case $platform in
+    android|androidx86)
+	. $ECLROOT/platforms/android/config.sh $platform || exit 1
+	;;
+    iPhoneOS|iPhoneSimulator)
+	. $ECLROOT/platforms/$platform/config.sh || exit 1
+	;;
+esac
+
+case $platform in
+    android|androidx86|iPhoneOS|iPhoneSimulator)
+	(cat $template_config; echo "ECL_TO_RUN=$ecl_to_run") > $builddir/cross_config
+	config_opts="\
+	--host=${host} --target=${target} \
+	--with-cross-config=$builddir/cross_config \
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--enable-threads=yes \
+	--disable-longdouble \
+	--enable-boehm=included \
+	--with-dffi=included \
+	--with-cmp=no \
+	--with-asdf=builtin \
+	--with-bytecmp=builtin \
+	--with-serve-event=yes \
+    	--disable-shared"
+	;;
+
+    host)
+	export CFLAGS="-m32"
+	export LDFLAGS="-m32"
+	export ABI=32
+
+	config_opts="\
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--enable-threads=yes \
+	--disable-longdouble \
+        --enable-boehm=included \
+	--with-dffi=included"
+	;;
+
+    host64)
+	config_opts="\
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--enable-threads=yes \
+	--enable-boehm=included \
+	--with-dffi=included"
+	;;
+
+    host64nodl)
+	config_opts="\
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--enable-threads=yes \
+	--enable-boehm=included \
+	--with-dffi=included \
+	--with-cmp=builtin \
+    	--disable-shared"
+	;;
+    *) 
+	usage; exit 1
+	;;
+esac
+
+
+cd ${builddir}
+${srcdir}/configure --srcdir=${srcdir} --prefix=$ECL_INSTALL_DIR ${config_opts}
+
+echo "Configure done in ${builddir}."
+echo "To build do:"
+echo "cd ${builddir}; make && make install"
diff --git a/configure_gmp_cross b/configure_gmp_cross
new file mode 100755
index 0000000..72beb27
--- /dev/null
+++ b/configure_gmp_cross
@@ -0,0 +1,83 @@
+#!/bin/bash
+
+usage()
+{
+    echo "Usage: `basename $0` platform"
+    echo ""
+    echo " platform    -- one of: host, iPhoneOS, iPhoneSimulator, android, androidx86"
+}
+
+[[ $# == 1 ]] || { usage; exit 1; }
+
+ECLROOT=$(cd $(dirname ${0}) && pwd -P)
+
+platform=$1
+#include the variable definitions 
+. scripts.conf
+GMP_INSTALL_DIR=$GMP_INSTALL_ROOT_DIR/$platform
+
+if [[ "$(uname -s)" == Darwin || ! -z "$MPIR_SRC_DIR" ]]; then
+    if [[ ! -d "$MPIR_SRC_DIR" ]]; then
+	echo "Cannot find MPIR source (needed if building on Mac OS)"
+	echo "please download and extract http://www.mpir.org/mpir-2.5.1.tar.bz2"
+	echo "and do:"
+	echo "export MPIR_SRC_DIR=/path/to/mpir-2.5.1"
+	exit 1
+    else
+	srcdir=$MPIR_SRC_DIR
+    fi
+else
+    srcdir=$ECLROOT/src/gmp
+fi
+
+#srcdir=$ECLROOT/../mpir-2.5.1
+host=$(${srcdir}/config.guess)
+
+builddir=$ECLROOT/build/$platform/gmp
+
+case $platform in
+    host)
+	;;
+    *)
+	. $ECLROOT/platforms/$platform/config.sh || exit 1
+esac
+
+if [ ! -d ${builddir} ] ; then
+    echo Creating directory "\`${builddir}'"
+    mkdir -p ${builddir}
+fi
+
+if grep -q MPIR $srcdir/Changelog; then
+    echo "Using MPIR library"
+    base_config_opt="--enable-gmpcompat"
+fi
+
+base_config_opts="\
+        --disable-shared \
+	${base_config_opt}"
+
+case $platform in
+    host)
+	base_config_opts="\
+	--with-pic \
+	${base_config_opt}"
+
+	# MPIR-2.5.1: must use applenopic on sandybridge
+	if [[ "$host" == "sandybridge-apple-darwin"* ]]; then 
+	    host=core2-apple-darwin
+	fi
+
+	export CFLAGS="-m32"
+	export LDFLAGS="-m32"
+	export ABI=32
+	;;
+    host64)
+	base_config_opts="\
+	--with-pic \
+	${base_config_opt}"
+	;;
+esac
+
+cd ${builddir}
+${srcdir}/configure --srcdir=${srcdir} --prefix=$GMP_INSTALL_DIR --host=${host} --target=${target} $base_config_opts
+
diff --git a/iPhone_universal b/iPhone_universal
new file mode 100755
index 0000000..0ac83af
--- /dev/null
+++ b/iPhone_universal
@@ -0,0 +1,37 @@
+#!/bin/bash
+
+ECLROOT=$(cd $(dirname ${0}) && pwd -P)
+
+# include ECL directory definition
+. $ECLROOT/scripts.conf
+
+do_lipo()
+{
+    armlib=$1
+    i386lib=$2
+    lipolib=$3
+
+    if [[ -f $armlib && -f $i386lib ]]; then
+	echo "Making fat binary from $armlib and $i386lib into $lipolib"
+	/usr/bin/lipo -arch arm $armlib -arch i386 $i386lib -create -output $lipolib
+    fi
+}
+
+shopt -s nullglob
+
+LIBS="$ECL_INSTALL_ROOT_DIR/iPhoneSimulator/lib/*.a $ECL_INSTALL_ROOT_DIR/iPhoneSimulator/lib/ecl-*/*.a $GMP_INSTALL_ROOT_DIR/iPhoneSimulator/lib/*.a"
+
+for i386lib in $LIBS; do
+    armlib=${i386lib/iPhoneSimulator/iPhoneOS}
+    lipolib=${i386lib/iPhoneSimulator/iPhoneUniversal}
+    if [[ ! -d $(dirname $lipolib) ]]; then
+	mkdir -p $(dirname $lipolib)
+    fi
+    do_lipo $armlib $i386lib $lipolib
+done
+
+ln -sf $ECL_INSTALL_ROOT_DIR/iPhoneOS/include $ECL_INSTALL_ROOT_DIR/iPhoneUniversal/include
+ln -sf $GMP_INSTALL_ROOT_DIR/iPhoneOS/include $GMP_INSTALL_ROOT_DIR/iPhoneUniversal/include
+
+echo "All done"
+
diff --git a/make_all b/make_all
new file mode 100644
index 0000000..8c3630e
--- /dev/null
+++ b/make_all
@@ -0,0 +1,36 @@
+all: host iPhoneOS iPhoneSimulator android
+
+host:
+	-rm -rf build/host
+	./configure_cross host
+	cd build/host/ecl && make && rm -rf /opt/ecl/host && make install
+
+host64:
+	-rm -rf build/host64
+	./configure_cross host64
+	cd build/host64/ecl && make && rm -rf /opt/ecl/host64 && make install
+
+host64nodl:
+	-rm -rf build/host64nodl
+	./configure_cross host64nodl
+	cd build/host64nodl/ecl && make && rm -rf /opt/ecl/host64nodl && make install
+
+iPhoneSimulator:
+	-rm -rf build/iPhoneSimulator
+	./configure_cross iPhoneSimulator
+	cd build/iPhoneSimulator/ecl && make && rm -rf /opt/ecl/iPhoneSimulator && make install
+
+iPhoneOS:
+	-rm -rf build/iPhoneOS
+	./configure_cross iPhoneOS
+	cd build/iPhoneOS/ecl && make && rm -rf /opt/ecl/iPhoneOS && make install
+
+android:
+	-rm -rf build/android
+	./configure_cross android
+	cd build/android/ecl && make && rm -rf /opt/ecl/android && make install
+
+androidx86:
+	-rm -rf build/androidx86
+	./configure_cross androidx86
+	cd build/androidx86/ecl && make && rm -rf /opt/ecl/androidx86 && make install
diff --git a/platforms/android/config.sh b/platforms/android/config.sh
new file mode 100755
index 0000000..4f5c115
--- /dev/null
+++ b/platforms/android/config.sh
@@ -0,0 +1,85 @@
+#! /bin/bash
+
+
+usage()
+{
+    echo "Usage: source $(basename $BASH_SOURCE) platform"
+    echo ""
+    echo " platform    -- one of: android, androidx86"
+}
+
+[ $# == 1 ] || { usage; return 1; }
+
+platform=$1
+
+case $platform in
+    android)
+	host=arm-linux-eabi
+	target=arm-linux-eabi
+	arch=arm
+	toolchain_arch="arm-linux-androideabi"
+	android_target=android-4
+	;;
+    androidx86)
+	host=i686-android-linux
+	target=i686-android-linux
+	arch=x86
+	toolchain_arch="x86"
+	# X86 and MIPS ABIs are only supported at API 9 or higher.
+	android_target=android-9
+	;;
+esac
+
+if [[ ! -d "${ANDROID_NDK_ROOT}" ]]; then
+    echo "Can not find Android NDK in ${ANDROID_NDK_ROOT}." >& 2
+    echo "Please set ANDROID_NDK_ROOT to your NDK install." >& 2
+    echo "e.g:" >& 2
+    echo "export ANDROID_NDK_ROOT=/opt/android/android-ndk-r8b" >& 2
+    return 1
+fi
+
+host_os=$(uname -s | sed -e 's/Linux/linux/;s/Darwin/mac/')
+
+
+case "${host_os}" in
+  "linux")
+    toolchain_dir="linux-x86_64"
+    ;;
+  "mac")
+    toolchain_dir="darwin-x86"
+    ;;
+  *)
+    echo "Host platform ${host_os} is not supported" >& 2
+    return 1
+esac
+
+toolchain_version="4.6"
+
+toolchain_target=$(basename \
+    ${ANDROID_NDK_ROOT}/toolchains/${toolchain_arch}-${toolchain_version})
+toolchain_path="${ANDROID_NDK_ROOT}/toolchains/${toolchain_target}"\
+"/prebuilt/${toolchain_dir}/bin/"
+sysroot="${ANDROID_NDK_ROOT}/platforms/${android_target}/arch-${arch}"
+
+export ANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN:-${toolchain_path}}
+
+if [[ ! -d "${ANDROID_TOOLCHAIN}" ]]; then
+    echo "Can not find Android toolchain in ${ANDROID_TOOLCHAIN}." >& 2
+    echo "The NDK version might be wrong." >& 2
+    return 1
+fi
+  
+export OBJCOPY=$(echo ${ANDROID_TOOLCHAIN}/*-objcopy)
+export STRIP=$(echo ${ANDROID_TOOLCHAIN}/*-strip)
+export AR=$(echo ${ANDROID_TOOLCHAIN}/*-ar)
+export RANLIB=$(echo ${ANDROID_TOOLCHAIN}/*-ranlib)
+export AS=$(echo ${ANDROID_TOOLCHAIN}/*-as)
+export CC=$(echo ${ANDROID_TOOLCHAIN}/*-gcc)
+export CXX=$(echo ${ANDROID_TOOLCHAIN}/*-g++)
+export CPP=$(echo ${ANDROID_TOOLCHAIN}/*-cpp)
+export NM=$(echo ${ANDROID_TOOLCHAIN}/*-nm)
+export GPROF=$(echo ${ANDROID_TOOLCHAIN}/*-gprof)
+export READEFLF=$(echo ${ANDROID_TOOLCHAIN}/*-readelf)
+export OBJDUMP=$(echo ${ANDROID_TOOLCHAIN}/*-objdump)
+export CPPFLAGS="--sysroot=${sysroot}"
+export LDFLAGS="--sysroot=${sysroot}"
diff --git a/platforms/android/cross_config.in b/platforms/android/cross_config.in
new file mode 100644
index 0000000..a593e04
--- /dev/null
+++ b/platforms/android/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=down
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=uint64_t
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=int64_t
+ECL_LONG_LONG_BITS=64
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/platforms/androidx86/cross_config.in b/platforms/androidx86/cross_config.in
new file mode 100644
index 0000000..a593e04
--- /dev/null
+++ b/platforms/androidx86/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=down
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=uint64_t
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=int64_t
+ECL_LONG_LONG_BITS=64
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/platforms/iPhoneOS/config.sh b/platforms/iPhoneOS/config.sh
new file mode 100755
index 0000000..3977603
--- /dev/null
+++ b/platforms/iPhoneOS/config.sh
@@ -0,0 +1,19 @@
+#! /bin/bash
+
+sdk=iphoneos
+sdk_ver=$(xcodebuild -version -sdk ${sdk} SDKVersion)
+echo "using SDK version: ${sdk_ver}"
+
+export force_cross_compiling=yes
+host=arm-apple-darwin
+target=arm-apple-darwin
+export SDKROOT=$(xcodebuild -version -sdk ${sdk} Path)
+#export CC=$(xcodebuild -sdk ${sdk} -find clang)
+export CC=$(xcodebuild -sdk ${sdk} -find gcc)
+export CXX="$CC"
+export CPP=$(xcodebuild -sdk ${sdk} -find cpp)
+export AR=$(xcodebuild -sdk ${sdk} -find ar)
+export STRIP=$(xcodebuild -sdk ${sdk} -find strip)
+export RANLIB=$(xcodebuild -sdk ${sdk} -find ranlib)
+export CFLAGS="-g -arch armv7 -isysroot $SDKROOT -DAPPLE -DIPHONE"
+export LDFLAGS="-arch armv7 -isysroot $SDKROOT"
diff --git a/platforms/iPhoneOS/cross_config.in b/platforms/iPhoneOS/cross_config.in
new file mode 100644
index 0000000..a593e04
--- /dev/null
+++ b/platforms/iPhoneOS/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=down
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=uint64_t
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=int64_t
+ECL_LONG_LONG_BITS=64
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/platforms/iPhoneSimulator/config.sh b/platforms/iPhoneSimulator/config.sh
new file mode 100755
index 0000000..cab538b
--- /dev/null
+++ b/platforms/iPhoneSimulator/config.sh
@@ -0,0 +1,19 @@
+#! /bin/bash
+
+sdk=iphonesimulator
+sdk_ver=$(xcodebuild -version -sdk ${sdk} SDKVersion)
+echo "using SDK version: ${sdk_ver}"
+
+export force_cross_compiling=yes
+host=i686-apple-darwin
+target=i686-apple-darwin
+export SDKROOT=$(xcodebuild -version -sdk ${sdk} Path)
+#export CC=$(xcodebuild -sdk ${sdk} -find clang)
+export CC=$(xcodebuild -sdk ${sdk} -find gcc)
+export CXX="$CC"
+export CPP=$(xcodebuild -sdk ${sdk} -find cpp)
+export AR=$(xcodebuild -sdk ${sdk} -find ar)
+export STRIP=$(xcodebuild -sdk ${sdk} -find strip)
+export RANLIB=$(xcodebuild -sdk ${sdk} -find ranlib)
+export CFLAGS="-g -arch i386 -isysroot $SDKROOT -DAPPLE -DIPHONE -D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -DIPHONE_SIMULATOR -DIPHONE_SDK_VER=${sdk_ver} -DIGNORE_DYNAMIC_LOADING -mmacosx-version-min=10.6 -fmessage-length=0 -fasm-blocks"
+export LDFLAGS="-arch i386 -isysroot $SDKROOT"
diff --git a/platforms/iPhoneSimulator/cross_config.in b/platforms/iPhoneSimulator/cross_config.in
new file mode 100644
index 0000000..a593e04
--- /dev/null
+++ b/platforms/iPhoneSimulator/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=down
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=uint64_t
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=int64_t
+ECL_LONG_LONG_BITS=64
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/scripts.conf b/scripts.conf
new file mode 100644
index 0000000..68278aa
--- /dev/null
+++ b/scripts.conf
@@ -0,0 +1,3 @@
+# configure here the installation path of the GMP library and ECL
+GMP_INSTALL_ROOT_DIR=/opt/gmp
+ECL_INSTALL_ROOT_DIR=/opt/ecl
-- 
1.7.12.1

