Scripts to build ECL on android/iphone

From: Sylvain Ageneau <ageneau@gmail.com>


---
 configure_cross                           |   91 ++
 configure_gmp_cross                       |   41 +
 platforms/android/config.sh               |   31 +
 platforms/android/cross_config.in         |   64 +
 platforms/android/include/arm_dpimacros.h | 1603 +++++++++++++++++++++++++++++
 platforms/android/include/arm_fpamacros.h |  419 ++++++++
 platforms/android/include/arm_vfpmacros.h |  299 +++++
 platforms/android/include/cpu-arm.h       |  776 ++++++++++++++
 platforms/android/include/link.h          |   25 
 platforms/android/include/linker.h        |  239 ++++
 platforms/android/include/ucontext.h      |    1 
 platforms/iPhoneOS/config.sh              |   15 
 platforms/iPhoneOS/cross_config.in        |   64 +
 platforms/iPhoneSimulator/config.sh       |   40 +
 14 files changed, 3708 insertions(+), 0 deletions(-)
 create mode 100755 configure_cross
 create mode 100755 configure_gmp_cross
 create mode 100644 platforms/android/config.sh
 create mode 100644 platforms/android/cross_config.in
 create mode 100644 platforms/android/include/arm_dpimacros.h
 create mode 100644 platforms/android/include/arm_fpamacros.h
 create mode 100644 platforms/android/include/arm_vfpmacros.h
 create mode 100644 platforms/android/include/cpu-arm.h
 create mode 100644 platforms/android/include/link.h
 create mode 100644 platforms/android/include/linker.h
 create mode 100644 platforms/android/include/ucontext.h
 create mode 100644 platforms/iPhoneOS/config.sh
 create mode 100644 platforms/iPhoneOS/cross_config.in
 create mode 100644 platforms/iPhoneSimulator/config.sh

diff --git a/configure_cross b/configure_cross
new file mode 100755
index 0000000..73fd3e1
--- /dev/null
+++ b/configure_cross
@@ -0,0 +1,91 @@
+#!/bin/bash
+
+usage()
+{
+    echo "Usage: `basename $0` platform"
+    echo ""
+    echo " platform    -- one of: host, iPhoneOS, iPhoneSimulator, android"
+}
+
+[ $# == 1 ] || { usage; exit 1; }
+
+
+platform=$1
+ECLROOT=$(cd $(dirname ${0}) && pwd -P)
+GMP_INSTALL_DIR=/opt/gmp/$platform
+ECL_INSTALL_DIR=/opt/ecl/$platform
+template_config=platforms/$platform/cross_config.in
+srcdir=$ECLROOT/src
+ecl_to_run=/opt/ecl/host/bin/ecl
+
+builddir=$ECLROOT/build/$platform/ecl
+
+if [ ! -d ${builddir} ] ; then
+    echo Creating directory "\`${builddir}'"
+    mkdir -p ${builddir}
+fi
+
+
+case $platform in
+    android|iPhoneOS|iPhoneSimulator)
+	. $ECLROOT/platforms/$platform/config.sh
+	(cat $template_config; echo "ECL_TO_RUN=$ecl_to_run") > $builddir/cross_config
+	config_opts="\
+	--host=${host} --target=${target} \
+	--with-cross-config=$builddir/cross_config \
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--disable-longdouble \
+	--enable-unicode=yes \
+        --enable-boehm=included \
+	--enable-threads=yes \
+	--with-debug-cflags=yes \
+	--with-clx=no \
+	--with-serve-event=no \
+	--with-tcp=builtin \
+	--with-x=no \
+	--with-rt=no \
+	--with-defsystem=no \
+	--with-fpe=yes \
+	--with-profile=no \
+	--with-dffi=no \
+	--with-asdf=no \
+	--with-bytecmp=builtin \
+	--with-cmp=no \
+	--disable-soname \
+    	--disable-shared"
+	;;
+
+    host)
+	export CFLAGS="-m32"
+	export LDFLAGS="-m32"
+	export ABI=32
+
+	config_opts="\
+	--with-gmp-prefix=$GMP_INSTALL_DIR \
+	--disable-longdouble \
+	--enable-unicode=yes \
+        --enable-boehm=included \
+	--enable-threads=yes \
+	--with-debug-cflags=yes \
+	--with-clx=no \
+	--with-serve-event=no \
+	--with-tcp=yes \
+	--with-x=no \
+	--with-rt=no \
+	--with-defsystem=no \
+	--with-fpe=yes \
+	--with-profile=no \
+	--with-dffi=no \
+	--with-asdf=yes \
+	--with-bytecmp=yes \
+	--with-cmp=yes"
+	;;
+    *) 
+	usage; exit 1
+	;;
+esac
+
+
+cd ${builddir}
+${srcdir}/configure --srcdir=${srcdir} --prefix=$ECL_INSTALL_DIR ${config_opts}
+
diff --git a/configure_gmp_cross b/configure_gmp_cross
new file mode 100755
index 0000000..a783ae4
--- /dev/null
+++ b/configure_gmp_cross
@@ -0,0 +1,41 @@
+#!/bin/bash
+
+usage()
+{
+    echo "Usage: `basename $0` platform"
+    echo ""
+    echo " platform    -- one of: host, iPhoneOS, iPhoneSimulator, android"
+}
+
+[[ $# == 1 ]] || { usage; exit 1; }
+
+ECLROOT=$(cd $(dirname ${0}) && pwd -P)
+
+platform=$1
+GMP_INSTALL_DIR=/opt/gmp/$platform
+srcdir=$ECLROOT/src/gmp
+builddir=$ECLROOT/build/$platform/gmp
+
+. $ECLROOT/platforms/$platform/config.sh
+
+if [ ! -d ${builddir} ] ; then
+    echo Creating directory "\`${builddir}'"
+    mkdir -p ${builddir}
+fi
+
+
+base_config_opts="\
+        --disable-shared \
+	--with-pic"
+
+case $platform in
+    host)
+	export CFLAGS="-m32"
+	export LDFLAGS="-m32"
+	export ABI=32
+	;;
+esac
+
+cd ${builddir}
+${srcdir}/configure --srcdir=${srcdir} --prefix=$GMP_INSTALL_DIR --host=${host} --target=${target} $base_config_opts
+
diff --git a/platforms/android/config.sh b/platforms/android/config.sh
new file mode 100644
index 0000000..16e0a91
--- /dev/null
+++ b/platforms/android/config.sh
@@ -0,0 +1,31 @@
+host=arm-linux-eabi
+target=arm-linux-eabi
+
+#ANDROID_NDK_ROOT=/opt/android/android-sdk-mac_x86/android-ndk-r5b
+ANDROID_NDK_ROOT=/opt/android/android-ndk-r5
+SYSROOT=$ANDROID_NDK_ROOT/platforms/android-9/arch-arm
+TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86
+#TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86
+
+
+export AR="$TOOLCHAIN/bin/arm-linux-androideabi-ar"
+export AS="$TOOLCHAIN/bin/arm-linux-androideabi-as"
+export CC="$TOOLCHAIN/bin/arm-linux-androideabi-gcc"
+export CXX="$TOOLCHAIN/bin/arm-linux-androideabi-g++"
+export CPP="$TOOLCHAIN/bin/arm-linux-androideabi-cpp"
+export NM="$TOOLCHAIN/bin/arm-linux-androideabi-nm"
+export STRIP="$TOOLCHAIN/bin/arm-linux-androideabi-strip"
+export RANLIB="$TOOLCHAIN/bin/arm-linux-androideabi-ranlib"
+export GPROF="$TOOLCHAIN/bin/arm-linux-androideabi-gprof"
+export READEFLF="$TOOLCHAIN/bin/arm-linux-androideabi-readelf"
+export OBJDUMP="$TOOLCHAIN/bin/arm-linux-androideabi-objdump"
+
+
+export CFLAGS="--sysroot=$SYSROOT -fpic -ffunction-sections -funwind-tables  -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -msoft-float -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -fno-unsigned-char -DANDROID  -DPLATFORM_ANDROID -Wa,--noexecstack -O0 -g -I$SYSROOT/usr/include -I$ECLROOT/platforms/android/include"
+
+export CFLAGS="$CFLAGS -DUSE_GET_STACKBASE_FOR_MAIN"
+export CPPFLAGS="--sysroot=$SYSROOT"
+export CXXFLAGS="$CFLAGS"
+
+export LDFLAGS="--sysroot=$SYSROOT -g -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-rpath-link=$SYSROOT/usr/lib  $SYSROOT/usr/lib/libc.so  $SYSROOT/usr/lib/libstdc++.so $SYSROOT/usr/lib/libm.so -lsupc++"
+
diff --git a/platforms/android/cross_config.in b/platforms/android/cross_config.in
new file mode 100644
index 0000000..a593e04
--- /dev/null
+++ b/platforms/android/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=down
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=uint64_t
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=int64_t
+ECL_LONG_LONG_BITS=64
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/platforms/android/include/arm_dpimacros.h b/platforms/android/include/arm_dpimacros.h
new file mode 100644
index 0000000..d8ff666
--- /dev/null
+++ b/platforms/android/include/arm_dpimacros.h
@@ -0,0 +1,1603 @@
+/* Macros for DPI ops, auto-generated from template */
+
+
+/* mov/mvn */
+
+/* Rd := imm8 ROR rot */
+#define ARM_MOV_REG_IMM_COND(p, reg, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_MOV, reg, 0, imm8, rot, cond)
+#define ARM_MOV_REG_IMM(p, reg, imm8, rot) \
+	ARM_MOV_REG_IMM_COND(p, reg, imm8, rot, ARMCOND_AL)
+/* S */
+#define ARM_MOVS_REG_IMM_COND(p, reg, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_MOV, reg, 0, imm8, rot, cond)
+#define ARM_MOVS_REG_IMM(p, reg, imm8, rot) \
+	ARM_MOVS_REG_IMM_COND(p, reg, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MOV_REG_IMM_COND(reg, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_MOV, reg, 0, imm8, rot, cond)
+#define _MOV_REG_IMM(reg, imm8, rot) \
+	_MOV_REG_IMM_COND(reg, imm8, rot, ARMCOND_AL)
+/* S */
+#define _MOVS_REG_IMM_COND(reg, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_MOV, reg, 0, imm8, rot, cond)
+#define _MOVS_REG_IMM(reg, imm8, rot) \
+	_MOVS_REG_IMM_COND(reg, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := imm8 */
+#define ARM_MOV_REG_IMM8_COND(p, reg, imm8, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_MOV, reg, 0, imm8, 0, cond)
+#define ARM_MOV_REG_IMM8(p, reg, imm8) \
+	ARM_MOV_REG_IMM8_COND(p, reg, imm8, ARMCOND_AL)
+/* S */
+#define ARM_MOVS_REG_IMM8_COND(p, reg, imm8, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_MOV, reg, 0, imm8, 0, cond)
+#define ARM_MOVS_REG_IMM8(p, reg, imm8) \
+	ARM_MOVS_REG_IMM8_COND(p, reg, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MOV_REG_IMM8_COND(reg, imm8, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_MOV, reg, 0, imm8, 0, cond)
+#define _MOV_REG_IMM8(reg, imm8) \
+	_MOV_REG_IMM8_COND(reg, imm8, ARMCOND_AL)
+/* S */
+#define _MOVS_REG_IMM8_COND(reg, imm8, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_MOV, reg, 0, imm8, 0, cond)
+#define _MOVS_REG_IMM8(reg, imm8) \
+	_MOVS_REG_IMM8_COND(reg, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rm */
+#define ARM_MOV_REG_REG_COND(p, rd, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_MOV, rd, 0, rm, cond)
+#define ARM_MOV_REG_REG(p, rd, rm) \
+	ARM_MOV_REG_REG_COND(p, rd, rm, ARMCOND_AL)
+/* S */
+#define ARM_MOVS_REG_REG_COND(p, rd, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_MOV, rd, 0, rm, cond)
+#define ARM_MOVS_REG_REG(p, rd, rm) \
+	ARM_MOVS_REG_REG_COND(p, rd, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MOV_REG_REG_COND(rd, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_MOV, rd, 0, rm, cond)
+#define _MOV_REG_REG(rd, rm) \
+	_MOV_REG_REG_COND(rd, rm, ARMCOND_AL)
+/* S */
+#define _MOVS_REG_REG_COND(rd, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_MOV, rd, 0, rm, cond)
+#define _MOVS_REG_REG(rd, rm) \
+	_MOVS_REG_REG_COND(rd, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rm <shift_type> imm_shift */
+#define ARM_MOV_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_MOV, rd, 0, rm, shift_type, imm_shift, cond)
+#define ARM_MOV_REG_IMMSHIFT(p, rd, rm, shift_type, imm_shift) \
+	ARM_MOV_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, ARMCOND_AL)
+/* S */
+#define ARM_MOVS_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_MOV, rd, 0, rm, shift_type, imm_shift, cond)
+#define ARM_MOVS_REG_IMMSHIFT(p, rd, rm, shift_type, imm_shift) \
+	ARM_MOVS_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MOV_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_MOV, rd, 0, rm, shift_type, imm_shift, cond)
+#define _MOV_REG_IMMSHIFT(rd, rm, shift_type, imm_shift) \
+	_MOV_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, ARMCOND_AL)
+/* S */
+#define _MOVS_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_MOV, rd, 0, rm, shift_type, imm_shift, cond)
+#define _MOVS_REG_IMMSHIFT(rd, rm, shift_type, imm_shift) \
+	_MOVS_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+
+/* Rd := (Rm <shift_type> Rs) */
+#define ARM_MOV_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_MOV, rd, 0, rm, shift_type, rs, cond)
+#define ARM_MOV_REG_REGSHIFT(p, rd, rm, shift_type, rs) \
+	ARM_MOV_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, ARMCOND_AL)
+/* S */
+#define ARM_MOVS_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_MOV, rd, 0, rm, shift_type, rs, cond)
+#define ARM_MOVS_REG_REGSHIFT(p, rd, rm, shift_type, rs) \
+	ARM_MOVS_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MOV_REG_REGSHIFT_COND(rd, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_MOV, rd, 0, rm, shift_type, rs, cond)
+#define _MOV_REG_REGSHIFT(rd, rm, shift_type, rs) \
+	_MOV_REG_REGSHIFT_COND(rd, rm, shift_type, rs, ARMCOND_AL)
+/* S */
+#define _MOVS_REG_REGSHIFT_COND(rd, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_MOV, rd, 0, rm, shift_type, rs, cond)
+#define _MOVS_REG_REGSHIFT(rd, rm, shift_type, rs) \
+	_MOVS_REG_REGSHIFT_COND(rd, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* Rd := imm8 ROR rot */
+#define ARM_MVN_REG_IMM_COND(p, reg, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_MVN, reg, 0, imm8, rot, cond)
+#define ARM_MVN_REG_IMM(p, reg, imm8, rot) \
+	ARM_MVN_REG_IMM_COND(p, reg, imm8, rot, ARMCOND_AL)
+/* S */
+#define ARM_MVNS_REG_IMM_COND(p, reg, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_MVN, reg, 0, imm8, rot, cond)
+#define ARM_MVNS_REG_IMM(p, reg, imm8, rot) \
+	ARM_MVNS_REG_IMM_COND(p, reg, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MVN_REG_IMM_COND(reg, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_MVN, reg, 0, imm8, rot, cond)
+#define _MVN_REG_IMM(reg, imm8, rot) \
+	_MVN_REG_IMM_COND(reg, imm8, rot, ARMCOND_AL)
+/* S */
+#define _MVNS_REG_IMM_COND(reg, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_MVN, reg, 0, imm8, rot, cond)
+#define _MVNS_REG_IMM(reg, imm8, rot) \
+	_MVNS_REG_IMM_COND(reg, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := imm8 */
+#define ARM_MVN_REG_IMM8_COND(p, reg, imm8, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_MVN, reg, 0, imm8, 0, cond)
+#define ARM_MVN_REG_IMM8(p, reg, imm8) \
+	ARM_MVN_REG_IMM8_COND(p, reg, imm8, ARMCOND_AL)
+/* S */
+#define ARM_MVNS_REG_IMM8_COND(p, reg, imm8, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_MVN, reg, 0, imm8, 0, cond)
+#define ARM_MVNS_REG_IMM8(p, reg, imm8) \
+	ARM_MVNS_REG_IMM8_COND(p, reg, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MVN_REG_IMM8_COND(reg, imm8, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_MVN, reg, 0, imm8, 0, cond)
+#define _MVN_REG_IMM8(reg, imm8) \
+	_MVN_REG_IMM8_COND(reg, imm8, ARMCOND_AL)
+/* S */
+#define _MVNS_REG_IMM8_COND(reg, imm8, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_MVN, reg, 0, imm8, 0, cond)
+#define _MVNS_REG_IMM8(reg, imm8) \
+	_MVNS_REG_IMM8_COND(reg, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rm */
+#define ARM_MVN_REG_REG_COND(p, rd, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_MVN, rd, 0, rm, cond)
+#define ARM_MVN_REG_REG(p, rd, rm) \
+	ARM_MVN_REG_REG_COND(p, rd, rm, ARMCOND_AL)
+/* S */
+#define ARM_MVNS_REG_REG_COND(p, rd, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_MVN, rd, 0, rm, cond)
+#define ARM_MVNS_REG_REG(p, rd, rm) \
+	ARM_MVNS_REG_REG_COND(p, rd, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MVN_REG_REG_COND(rd, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_MVN, rd, 0, rm, cond)
+#define _MVN_REG_REG(rd, rm) \
+	_MVN_REG_REG_COND(rd, rm, ARMCOND_AL)
+/* S */
+#define _MVNS_REG_REG_COND(rd, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_MVN, rd, 0, rm, cond)
+#define _MVNS_REG_REG(rd, rm) \
+	_MVNS_REG_REG_COND(rd, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rm <shift_type> imm_shift */
+#define ARM_MVN_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_MVN, rd, 0, rm, shift_type, imm_shift, cond)
+#define ARM_MVN_REG_IMMSHIFT(p, rd, rm, shift_type, imm_shift) \
+	ARM_MVN_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, ARMCOND_AL)
+/* S */
+#define ARM_MVNS_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_MVN, rd, 0, rm, shift_type, imm_shift, cond)
+#define ARM_MVNS_REG_IMMSHIFT(p, rd, rm, shift_type, imm_shift) \
+	ARM_MVNS_REG_IMMSHIFT_COND(p, rd, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MVN_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_MVN, rd, 0, rm, shift_type, imm_shift, cond)
+#define _MVN_REG_IMMSHIFT(rd, rm, shift_type, imm_shift) \
+	_MVN_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, ARMCOND_AL)
+/* S */
+#define _MVNS_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_MVN, rd, 0, rm, shift_type, imm_shift, cond)
+#define _MVNS_REG_IMMSHIFT(rd, rm, shift_type, imm_shift) \
+	_MVNS_REG_IMMSHIFT_COND(rd, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+
+/* Rd := (Rm <shift_type> Rs) */
+#define ARM_MVN_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_MVN, rd, 0, rm, shift_type, rs, cond)
+#define ARM_MVN_REG_REGSHIFT(p, rd, rm, shift_type, rs) \
+	ARM_MVN_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, ARMCOND_AL)
+/* S */
+#define ARM_MVNS_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_MVN, rd, 0, rm, shift_type, rs, cond)
+#define ARM_MVNS_REG_REGSHIFT(p, rd, rm, shift_type, rs) \
+	ARM_MVNS_REG_REGSHIFT_COND(p, rd, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _MVN_REG_REGSHIFT_COND(rd, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_MVN, rd, 0, rm, shift_type, rs, cond)
+#define _MVN_REG_REGSHIFT(rd, rm, shift_type, rs) \
+	_MVN_REG_REGSHIFT_COND(rd, rm, shift_type, rs, ARMCOND_AL)
+/* S */
+#define _MVNS_REG_REGSHIFT_COND(rd, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_MVN, rd, 0, rm, shift_type, rs, cond)
+#define _MVNS_REG_REGSHIFT(rd, rm, shift_type, rs) \
+	_MVNS_REG_REGSHIFT_COND(rd, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+
+/* DPIs, arithmetic and logical */
+
+/* -- AND -- */
+
+/* Rd := Rn AND (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_AND_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_AND, rd, rn, imm8, rot, cond)
+#define ARM_AND_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_AND_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_ANDS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_AND, rd, rn, imm8, rot, cond)
+#define ARM_ANDS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ANDS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _AND_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_AND, rd, rn, imm8, rot, cond)
+#define _AND_REG_IMM(rd, rn, imm8, rot) \
+	_AND_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _ANDS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_AND, rd, rn, imm8, rot, cond)
+#define _ANDS_REG_IMM(rd, rn, imm8, rot) \
+	_ANDS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn AND imm8 */
+#define ARM_AND_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_AND_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_AND_REG_IMM8(p, rd, rn, imm8) \
+	ARM_AND_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_ANDS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ANDS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ANDS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ANDS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _AND_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_AND_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _AND_REG_IMM8(rd, rn, imm8) \
+	_AND_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _ANDS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ANDS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ANDS_REG_IMM8(rd, rn, imm8) \
+	_ANDS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn AND Rm */
+#define ARM_AND_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_AND, rd, rn, rm, cond)
+#define ARM_AND_REG_REG(p, rd, rn, rm) \
+	ARM_AND_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_ANDS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_AND, rd, rn, rm, cond)
+#define ARM_ANDS_REG_REG(p, rd, rn, rm) \
+	ARM_ANDS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _AND_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_AND, rd, rn, rm, cond)
+#define _AND_REG_REG(rd, rn, rm) \
+	_AND_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _ANDS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_AND, rd, rn, rm, cond)
+#define _ANDS_REG_REG(rd, rn, rm) \
+	_ANDS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn AND (Rm <shift_type> imm_shift) */
+#define ARM_AND_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_AND, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_AND_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_AND_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_ANDS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_AND, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ANDS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ANDS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _AND_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_AND, rd, rn, rm, shift_type, imm_shift, cond)
+#define _AND_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_AND_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _ANDS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_AND, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ANDS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ANDS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn AND (Rm <shift_type> Rs) */
+#define ARM_AND_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_AND, rd, rn, rm, shift_t, rs, cond)
+#define ARM_AND_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_AND_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_ANDS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_AND, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ANDS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ANDS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _AND_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_AND, rd, rn, rm, shift_t, rs, cond)
+#define _AND_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_AND_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _ANDS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_AND, rd, rn, rm, shift_t, rs, cond)
+#define _ANDS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ANDS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- EOR -- */
+
+/* Rd := Rn EOR (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_EOR_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_EOR, rd, rn, imm8, rot, cond)
+#define ARM_EOR_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_EOR_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_EORS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_EOR, rd, rn, imm8, rot, cond)
+#define ARM_EORS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_EORS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _EOR_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_EOR, rd, rn, imm8, rot, cond)
+#define _EOR_REG_IMM(rd, rn, imm8, rot) \
+	_EOR_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _EORS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_EOR, rd, rn, imm8, rot, cond)
+#define _EORS_REG_IMM(rd, rn, imm8, rot) \
+	_EORS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn EOR imm8 */
+#define ARM_EOR_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_EOR_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_EOR_REG_IMM8(p, rd, rn, imm8) \
+	ARM_EOR_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_EORS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_EORS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_EORS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_EORS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _EOR_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_EOR_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _EOR_REG_IMM8(rd, rn, imm8) \
+	_EOR_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _EORS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_EORS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _EORS_REG_IMM8(rd, rn, imm8) \
+	_EORS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn EOR Rm */
+#define ARM_EOR_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_EOR, rd, rn, rm, cond)
+#define ARM_EOR_REG_REG(p, rd, rn, rm) \
+	ARM_EOR_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_EORS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_EOR, rd, rn, rm, cond)
+#define ARM_EORS_REG_REG(p, rd, rn, rm) \
+	ARM_EORS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _EOR_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_EOR, rd, rn, rm, cond)
+#define _EOR_REG_REG(rd, rn, rm) \
+	_EOR_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _EORS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_EOR, rd, rn, rm, cond)
+#define _EORS_REG_REG(rd, rn, rm) \
+	_EORS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn EOR (Rm <shift_type> imm_shift) */
+#define ARM_EOR_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_EOR, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_EOR_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_EOR_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_EORS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_EOR, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_EORS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_EORS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _EOR_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_EOR, rd, rn, rm, shift_type, imm_shift, cond)
+#define _EOR_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_EOR_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _EORS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_EOR, rd, rn, rm, shift_type, imm_shift, cond)
+#define _EORS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_EORS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn EOR (Rm <shift_type> Rs) */
+#define ARM_EOR_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_EOR, rd, rn, rm, shift_t, rs, cond)
+#define ARM_EOR_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_EOR_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_EORS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_EOR, rd, rn, rm, shift_t, rs, cond)
+#define ARM_EORS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_EORS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _EOR_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_EOR, rd, rn, rm, shift_t, rs, cond)
+#define _EOR_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_EOR_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _EORS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_EOR, rd, rn, rm, shift_t, rs, cond)
+#define _EORS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_EORS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- SUB -- */
+
+/* Rd := Rn SUB (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_SUB_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_SUB, rd, rn, imm8, rot, cond)
+#define ARM_SUB_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_SUB_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_SUBS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_SUB, rd, rn, imm8, rot, cond)
+#define ARM_SUBS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_SUBS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SUB_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_SUB, rd, rn, imm8, rot, cond)
+#define _SUB_REG_IMM(rd, rn, imm8, rot) \
+	_SUB_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _SUBS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_SUB, rd, rn, imm8, rot, cond)
+#define _SUBS_REG_IMM(rd, rn, imm8, rot) \
+	_SUBS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SUB imm8 */
+#define ARM_SUB_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_SUB_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_SUB_REG_IMM8(p, rd, rn, imm8) \
+	ARM_SUB_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_SUBS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_SUBS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_SUBS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_SUBS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SUB_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_SUB_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _SUB_REG_IMM8(rd, rn, imm8) \
+	_SUB_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _SUBS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_SUBS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _SUBS_REG_IMM8(rd, rn, imm8) \
+	_SUBS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SUB Rm */
+#define ARM_SUB_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_SUB, rd, rn, rm, cond)
+#define ARM_SUB_REG_REG(p, rd, rn, rm) \
+	ARM_SUB_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_SUBS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_SUB, rd, rn, rm, cond)
+#define ARM_SUBS_REG_REG(p, rd, rn, rm) \
+	ARM_SUBS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SUB_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_SUB, rd, rn, rm, cond)
+#define _SUB_REG_REG(rd, rn, rm) \
+	_SUB_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _SUBS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_SUB, rd, rn, rm, cond)
+#define _SUBS_REG_REG(rd, rn, rm) \
+	_SUBS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SUB (Rm <shift_type> imm_shift) */
+#define ARM_SUB_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_SUB, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_SUB_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_SUB_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_SUBS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_SUB, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_SUBS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_SUBS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SUB_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_SUB, rd, rn, rm, shift_type, imm_shift, cond)
+#define _SUB_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_SUB_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _SUBS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_SUB, rd, rn, rm, shift_type, imm_shift, cond)
+#define _SUBS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_SUBS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SUB (Rm <shift_type> Rs) */
+#define ARM_SUB_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_SUB, rd, rn, rm, shift_t, rs, cond)
+#define ARM_SUB_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_SUB_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_SUBS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_SUB, rd, rn, rm, shift_t, rs, cond)
+#define ARM_SUBS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_SUBS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SUB_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_SUB, rd, rn, rm, shift_t, rs, cond)
+#define _SUB_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_SUB_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _SUBS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_SUB, rd, rn, rm, shift_t, rs, cond)
+#define _SUBS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_SUBS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- RSB -- */
+
+/* Rd := Rn RSB (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_RSB_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_RSB, rd, rn, imm8, rot, cond)
+#define ARM_RSB_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_RSB_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_RSBS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_RSB, rd, rn, imm8, rot, cond)
+#define ARM_RSBS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_RSBS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSB_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_RSB, rd, rn, imm8, rot, cond)
+#define _RSB_REG_IMM(rd, rn, imm8, rot) \
+	_RSB_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _RSBS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_RSB, rd, rn, imm8, rot, cond)
+#define _RSBS_REG_IMM(rd, rn, imm8, rot) \
+	_RSBS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSB imm8 */
+#define ARM_RSB_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_RSB_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_RSB_REG_IMM8(p, rd, rn, imm8) \
+	ARM_RSB_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_RSBS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_RSBS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_RSBS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_RSBS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSB_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_RSB_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _RSB_REG_IMM8(rd, rn, imm8) \
+	_RSB_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _RSBS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_RSBS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _RSBS_REG_IMM8(rd, rn, imm8) \
+	_RSBS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSB Rm */
+#define ARM_RSB_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_RSB, rd, rn, rm, cond)
+#define ARM_RSB_REG_REG(p, rd, rn, rm) \
+	ARM_RSB_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_RSBS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_RSB, rd, rn, rm, cond)
+#define ARM_RSBS_REG_REG(p, rd, rn, rm) \
+	ARM_RSBS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSB_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_RSB, rd, rn, rm, cond)
+#define _RSB_REG_REG(rd, rn, rm) \
+	_RSB_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _RSBS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_RSB, rd, rn, rm, cond)
+#define _RSBS_REG_REG(rd, rn, rm) \
+	_RSBS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSB (Rm <shift_type> imm_shift) */
+#define ARM_RSB_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_RSB, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_RSB_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_RSB_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_RSBS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_RSB, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_RSBS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_RSBS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSB_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_RSB, rd, rn, rm, shift_type, imm_shift, cond)
+#define _RSB_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_RSB_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _RSBS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_RSB, rd, rn, rm, shift_type, imm_shift, cond)
+#define _RSBS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_RSBS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSB (Rm <shift_type> Rs) */
+#define ARM_RSB_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_RSB, rd, rn, rm, shift_t, rs, cond)
+#define ARM_RSB_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_RSB_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_RSBS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_RSB, rd, rn, rm, shift_t, rs, cond)
+#define ARM_RSBS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_RSBS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSB_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_RSB, rd, rn, rm, shift_t, rs, cond)
+#define _RSB_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_RSB_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _RSBS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_RSB, rd, rn, rm, shift_t, rs, cond)
+#define _RSBS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_RSBS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- ADD -- */
+
+/* Rd := Rn ADD (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_ADD_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_ADD, rd, rn, imm8, rot, cond)
+#define ARM_ADD_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ADD_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_ADDS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_ADD, rd, rn, imm8, rot, cond)
+#define ARM_ADDS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ADDS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADD_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_ADD, rd, rn, imm8, rot, cond)
+#define _ADD_REG_IMM(rd, rn, imm8, rot) \
+	_ADD_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _ADDS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_ADD, rd, rn, imm8, rot, cond)
+#define _ADDS_REG_IMM(rd, rn, imm8, rot) \
+	_ADDS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADD imm8 */
+#define ARM_ADD_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ADD_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ADD_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ADD_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_ADDS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ADDS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ADDS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ADDS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADD_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ADD_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ADD_REG_IMM8(rd, rn, imm8) \
+	_ADD_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _ADDS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ADDS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ADDS_REG_IMM8(rd, rn, imm8) \
+	_ADDS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADD Rm */
+#define ARM_ADD_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_ADD, rd, rn, rm, cond)
+#define ARM_ADD_REG_REG(p, rd, rn, rm) \
+	ARM_ADD_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_ADDS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_ADD, rd, rn, rm, cond)
+#define ARM_ADDS_REG_REG(p, rd, rn, rm) \
+	ARM_ADDS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADD_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_ADD, rd, rn, rm, cond)
+#define _ADD_REG_REG(rd, rn, rm) \
+	_ADD_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _ADDS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_ADD, rd, rn, rm, cond)
+#define _ADDS_REG_REG(rd, rn, rm) \
+	_ADDS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADD (Rm <shift_type> imm_shift) */
+#define ARM_ADD_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_ADD, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ADD_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ADD_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_ADDS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_ADD, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ADDS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ADDS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADD_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_ADD, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ADD_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ADD_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _ADDS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_ADD, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ADDS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ADDS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADD (Rm <shift_type> Rs) */
+#define ARM_ADD_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_ADD, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ADD_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ADD_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_ADDS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_ADD, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ADDS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ADDS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADD_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_ADD, rd, rn, rm, shift_t, rs, cond)
+#define _ADD_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ADD_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _ADDS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_ADD, rd, rn, rm, shift_t, rs, cond)
+#define _ADDS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ADDS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- ADC -- */
+
+/* Rd := Rn ADC (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_ADC_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_ADC, rd, rn, imm8, rot, cond)
+#define ARM_ADC_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ADC_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_ADCS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_ADC, rd, rn, imm8, rot, cond)
+#define ARM_ADCS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ADCS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADC_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_ADC, rd, rn, imm8, rot, cond)
+#define _ADC_REG_IMM(rd, rn, imm8, rot) \
+	_ADC_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _ADCS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_ADC, rd, rn, imm8, rot, cond)
+#define _ADCS_REG_IMM(rd, rn, imm8, rot) \
+	_ADCS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADC imm8 */
+#define ARM_ADC_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ADC_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ADC_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ADC_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_ADCS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ADCS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ADCS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ADCS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADC_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ADC_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ADC_REG_IMM8(rd, rn, imm8) \
+	_ADC_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _ADCS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ADCS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ADCS_REG_IMM8(rd, rn, imm8) \
+	_ADCS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADC Rm */
+#define ARM_ADC_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_ADC, rd, rn, rm, cond)
+#define ARM_ADC_REG_REG(p, rd, rn, rm) \
+	ARM_ADC_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_ADCS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_ADC, rd, rn, rm, cond)
+#define ARM_ADCS_REG_REG(p, rd, rn, rm) \
+	ARM_ADCS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADC_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_ADC, rd, rn, rm, cond)
+#define _ADC_REG_REG(rd, rn, rm) \
+	_ADC_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _ADCS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_ADC, rd, rn, rm, cond)
+#define _ADCS_REG_REG(rd, rn, rm) \
+	_ADCS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADC (Rm <shift_type> imm_shift) */
+#define ARM_ADC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_ADC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ADC_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ADC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_ADCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_ADC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ADCS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ADCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_ADC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ADC_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ADC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _ADCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_ADC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ADCS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ADCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ADC (Rm <shift_type> Rs) */
+#define ARM_ADC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_ADC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ADC_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ADC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_ADCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_ADC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ADCS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ADCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ADC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_ADC, rd, rn, rm, shift_t, rs, cond)
+#define _ADC_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ADC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _ADCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_ADC, rd, rn, rm, shift_t, rs, cond)
+#define _ADCS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ADCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- SBC -- */
+
+/* Rd := Rn SBC (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_SBC_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_SBC, rd, rn, imm8, rot, cond)
+#define ARM_SBC_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_SBC_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_SBCS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_SBC, rd, rn, imm8, rot, cond)
+#define ARM_SBCS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_SBCS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SBC_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_SBC, rd, rn, imm8, rot, cond)
+#define _SBC_REG_IMM(rd, rn, imm8, rot) \
+	_SBC_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _SBCS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_SBC, rd, rn, imm8, rot, cond)
+#define _SBCS_REG_IMM(rd, rn, imm8, rot) \
+	_SBCS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SBC imm8 */
+#define ARM_SBC_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_SBC_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_SBC_REG_IMM8(p, rd, rn, imm8) \
+	ARM_SBC_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_SBCS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_SBCS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_SBCS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_SBCS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SBC_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_SBC_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _SBC_REG_IMM8(rd, rn, imm8) \
+	_SBC_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _SBCS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_SBCS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _SBCS_REG_IMM8(rd, rn, imm8) \
+	_SBCS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SBC Rm */
+#define ARM_SBC_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_SBC, rd, rn, rm, cond)
+#define ARM_SBC_REG_REG(p, rd, rn, rm) \
+	ARM_SBC_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_SBCS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_SBC, rd, rn, rm, cond)
+#define ARM_SBCS_REG_REG(p, rd, rn, rm) \
+	ARM_SBCS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SBC_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_SBC, rd, rn, rm, cond)
+#define _SBC_REG_REG(rd, rn, rm) \
+	_SBC_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _SBCS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_SBC, rd, rn, rm, cond)
+#define _SBCS_REG_REG(rd, rn, rm) \
+	_SBCS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SBC (Rm <shift_type> imm_shift) */
+#define ARM_SBC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_SBC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_SBC_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_SBC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_SBCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_SBC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_SBCS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_SBCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SBC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_SBC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _SBC_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_SBC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _SBCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_SBC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _SBCS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_SBCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn SBC (Rm <shift_type> Rs) */
+#define ARM_SBC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_SBC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_SBC_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_SBC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_SBCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_SBC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_SBCS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_SBCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _SBC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_SBC, rd, rn, rm, shift_t, rs, cond)
+#define _SBC_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_SBC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _SBCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_SBC, rd, rn, rm, shift_t, rs, cond)
+#define _SBCS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_SBCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- RSC -- */
+
+/* Rd := Rn RSC (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_RSC_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_RSC, rd, rn, imm8, rot, cond)
+#define ARM_RSC_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_RSC_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_RSCS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_RSC, rd, rn, imm8, rot, cond)
+#define ARM_RSCS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_RSCS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSC_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_RSC, rd, rn, imm8, rot, cond)
+#define _RSC_REG_IMM(rd, rn, imm8, rot) \
+	_RSC_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _RSCS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_RSC, rd, rn, imm8, rot, cond)
+#define _RSCS_REG_IMM(rd, rn, imm8, rot) \
+	_RSCS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSC imm8 */
+#define ARM_RSC_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_RSC_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_RSC_REG_IMM8(p, rd, rn, imm8) \
+	ARM_RSC_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_RSCS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_RSCS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_RSCS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_RSCS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSC_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_RSC_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _RSC_REG_IMM8(rd, rn, imm8) \
+	_RSC_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _RSCS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_RSCS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _RSCS_REG_IMM8(rd, rn, imm8) \
+	_RSCS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSC Rm */
+#define ARM_RSC_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_RSC, rd, rn, rm, cond)
+#define ARM_RSC_REG_REG(p, rd, rn, rm) \
+	ARM_RSC_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_RSCS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_RSC, rd, rn, rm, cond)
+#define ARM_RSCS_REG_REG(p, rd, rn, rm) \
+	ARM_RSCS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSC_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_RSC, rd, rn, rm, cond)
+#define _RSC_REG_REG(rd, rn, rm) \
+	_RSC_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _RSCS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_RSC, rd, rn, rm, cond)
+#define _RSCS_REG_REG(rd, rn, rm) \
+	_RSCS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSC (Rm <shift_type> imm_shift) */
+#define ARM_RSC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_RSC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_RSC_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_RSC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_RSCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_RSC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_RSCS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_RSCS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_RSC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _RSC_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_RSC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _RSCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_RSC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _RSCS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_RSCS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn RSC (Rm <shift_type> Rs) */
+#define ARM_RSC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_RSC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_RSC_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_RSC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_RSCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_RSC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_RSCS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_RSCS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _RSC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_RSC, rd, rn, rm, shift_t, rs, cond)
+#define _RSC_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_RSC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _RSCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_RSC, rd, rn, rm, shift_t, rs, cond)
+#define _RSCS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_RSCS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- ORR -- */
+
+/* Rd := Rn ORR (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_ORR_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_ORR, rd, rn, imm8, rot, cond)
+#define ARM_ORR_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ORR_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_ORRS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_ORR, rd, rn, imm8, rot, cond)
+#define ARM_ORRS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_ORRS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ORR_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_ORR, rd, rn, imm8, rot, cond)
+#define _ORR_REG_IMM(rd, rn, imm8, rot) \
+	_ORR_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _ORRS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_ORR, rd, rn, imm8, rot, cond)
+#define _ORRS_REG_IMM(rd, rn, imm8, rot) \
+	_ORRS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ORR imm8 */
+#define ARM_ORR_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ORR_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ORR_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ORR_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_ORRS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_ORRS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_ORRS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_ORRS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ORR_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ORR_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ORR_REG_IMM8(rd, rn, imm8) \
+	_ORR_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _ORRS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_ORRS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _ORRS_REG_IMM8(rd, rn, imm8) \
+	_ORRS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ORR Rm */
+#define ARM_ORR_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_ORR, rd, rn, rm, cond)
+#define ARM_ORR_REG_REG(p, rd, rn, rm) \
+	ARM_ORR_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_ORRS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_ORR, rd, rn, rm, cond)
+#define ARM_ORRS_REG_REG(p, rd, rn, rm) \
+	ARM_ORRS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ORR_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_ORR, rd, rn, rm, cond)
+#define _ORR_REG_REG(rd, rn, rm) \
+	_ORR_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _ORRS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_ORR, rd, rn, rm, cond)
+#define _ORRS_REG_REG(rd, rn, rm) \
+	_ORRS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ORR (Rm <shift_type> imm_shift) */
+#define ARM_ORR_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_ORR, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ORR_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ORR_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_ORRS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_ORR, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_ORRS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_ORRS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ORR_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_ORR, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ORR_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ORR_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _ORRS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_ORR, rd, rn, rm, shift_type, imm_shift, cond)
+#define _ORRS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_ORRS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn ORR (Rm <shift_type> Rs) */
+#define ARM_ORR_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_ORR, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ORR_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ORR_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_ORRS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_ORR, rd, rn, rm, shift_t, rs, cond)
+#define ARM_ORRS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_ORRS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _ORR_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_ORR, rd, rn, rm, shift_t, rs, cond)
+#define _ORR_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ORR_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _ORRS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_ORR, rd, rn, rm, shift_t, rs, cond)
+#define _ORRS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_ORRS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+/* -- BIC -- */
+
+/* Rd := Rn BIC (imm8 ROR rot) ; rot is power of 2 */
+#define ARM_BIC_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_REG_IMM8ROT_COND(p, ARMOP_BIC, rd, rn, imm8, rot, cond)
+#define ARM_BIC_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_BIC_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+#define ARM_BICS_REG_IMM_COND(p, rd, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_BIC, rd, rn, imm8, rot, cond)
+#define ARM_BICS_REG_IMM(p, rd, rn, imm8, rot) \
+	ARM_BICS_REG_IMM_COND(p, rd, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _BIC_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_REG_IMM8ROT_COND(ARMOP_BIC, rd, rn, imm8, rot, cond)
+#define _BIC_REG_IMM(rd, rn, imm8, rot) \
+	_BIC_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#define _BICS_REG_IMM_COND(rd, rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_BIC, rd, rn, imm8, rot, cond)
+#define _BICS_REG_IMM(rd, rn, imm8, rot) \
+	_BICS_REG_IMM_COND(rd, rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn BIC imm8 */
+#define ARM_BIC_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_BIC_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_BIC_REG_IMM8(p, rd, rn, imm8) \
+	ARM_BIC_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+#define ARM_BICS_REG_IMM8_COND(p, rd, rn, imm8, cond) \
+	ARM_BICS_REG_IMM_COND(p, rd, rn, imm8, 0, cond)
+#define ARM_BICS_REG_IMM8(p, rd, rn, imm8) \
+	ARM_BICS_REG_IMM8_COND(p, rd, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _BIC_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_BIC_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _BIC_REG_IMM8(rd, rn, imm8) \
+	_BIC_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#define _BICS_REG_IMM8_COND(rd, rn, imm8, cond) \
+	_BICS_REG_IMM_COND(rd, rn, imm8, 0, cond)
+#define _BICS_REG_IMM8(rd, rn, imm8) \
+	_BICS_REG_IMM8_COND(rd, rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn BIC Rm */
+#define ARM_BIC_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_REG_REG_COND(p, ARMOP_BIC, rd, rn, rm, cond)
+#define ARM_BIC_REG_REG(p, rd, rn, rm) \
+	ARM_BIC_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+#define ARM_BICS_REG_REG_COND(p, rd, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_BIC, rd, rn, rm, cond)
+#define ARM_BICS_REG_REG(p, rd, rn, rm) \
+	ARM_BICS_REG_REG_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _BIC_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_REG_REG_COND(ARMOP_BIC, rd, rn, rm, cond)
+#define _BIC_REG_REG(rd, rn, rm) \
+	_BIC_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#define _BICS_REG_REG_COND(rd, rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_BIC, rd, rn, rm, cond)
+#define _BICS_REG_REG(rd, rn, rm) \
+	_BICS_REG_REG_COND(rd, rn, rm, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn BIC (Rm <shift_type> imm_shift) */
+#define ARM_BIC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_REG_IMMSHIFT_COND(p, ARMOP_BIC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_BIC_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_BIC_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define ARM_BICS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_BIC, rd, rn, rm, shift_type, imm_shift, cond)
+#define ARM_BICS_REG_IMMSHIFT(p, rd, rn, rm, shift_type, imm_shift) \
+	ARM_BICS_REG_IMMSHIFT_COND(p, rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _BIC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_REG_IMMSHIFT_COND(ARMOP_BIC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _BIC_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_BIC_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#define _BICS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_BIC, rd, rn, rm, shift_type, imm_shift, cond)
+#define _BICS_REG_IMMSHIFT(rd, rn, rm, shift_type, imm_shift) \
+	_BICS_REG_IMMSHIFT_COND(rd, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* Rd := Rn BIC (Rm <shift_type> Rs) */
+#define ARM_BIC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_REG_REGSHIFT_COND(p, ARMOP_BIC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_BIC_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_BIC_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define ARM_BICS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, cond) \
+	ARM_DPIOP_S_REG_REGSHIFT_COND(p, ARMOP_BIC, rd, rn, rm, shift_t, rs, cond)
+#define ARM_BICS_REG_REGSHIFT(p, rd, rn, rm, shift_type, rs) \
+	ARM_BICS_REG_REGSHIFT_COND(p, rd, rn, rm, shift_type, rs, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _BIC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_REG_REGSHIFT_COND(ARMOP_BIC, rd, rn, rm, shift_t, rs, cond)
+#define _BIC_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_BIC_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#define _BICS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, cond) \
+	ARM_IASM_DPIOP_S_REG_REGSHIFT_COND(ARMOP_BIC, rd, rn, rm, shift_t, rs, cond)
+#define _BICS_REG_REGSHIFT(rd, rn, rm, shift_type, rs) \
+	_BICS_REG_REGSHIFT_COND(rd, rn, rm, shift_type, rs, ARMCOND_AL)
+#endif
+
+
+
+
+
+
+/* DPIs, comparison */
+
+/* PSR := TST Rn, (imm8 ROR 2*rot) */
+#define ARM_TST_REG_IMM_COND(p, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_TST, 0, rn, imm8, rot, cond)
+#define ARM_TST_REG_IMM(p, rn, imm8, rot) \
+	ARM_TST_REG_IMM_COND(p, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TST_REG_IMM_COND(rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_TST, 0, rn, imm8, rot, cond)
+#define _TST_REG_IMM(rn, imm8, rot) \
+	_TST_REG_IMM_COND(rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* PSR := TST Rn, imm8 */
+#define ARM_TST_REG_IMM8_COND(p, rn, imm8, cond) \
+	ARM_TST_REG_IMM_COND(p, rn, imm8, 0, cond)
+#define ARM_TST_REG_IMM8(p, rn, imm8) \
+	ARM_TST_REG_IMM8_COND(p, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TST_REG_IMM8_COND(rn, imm8, cond) \
+	_TST_REG_IMM_COND(rn, imm8, 0, cond)
+#define _TST_REG_IMM8(rn, imm8) \
+	_TST_REG_IMM8_COND(rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* PSR := TST Rn, Rm */
+#define ARM_TST_REG_REG_COND(p, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_TST, 0, rn, rm, cond)
+#define ARM_TST_REG_REG(p, rn, rm) \
+	ARM_TST_REG_REG_COND(p, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TST_REG_REG_COND(rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_TST, 0, rn, rm, cond)
+#define _TST_REG_REG(rn, rm) \
+	_TST_REG_REG_COND(rn, rm, ARMCOND_AL)
+#endif
+
+
+/* PSR := TST Rn, (Rm <shift_type> imm8) */
+#define ARM_TST_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_TST, 0, rn, rm, shift_type, imm_shift, cond)
+#define ARM_TST_REG_IMMSHIFT(p, rn, rm, shift_type, imm_shift) \
+	ARM_TST_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TST_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_TST, 0, rn, rm, shift_type, imm_shift, cond)
+#define _TST_REG_IMMSHIFT(rn, rm, shift_type, imm_shift) \
+	_TST_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* PSR := TEQ Rn, (imm8 ROR 2*rot) */
+#define ARM_TEQ_REG_IMM_COND(p, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_TEQ, 0, rn, imm8, rot, cond)
+#define ARM_TEQ_REG_IMM(p, rn, imm8, rot) \
+	ARM_TEQ_REG_IMM_COND(p, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TEQ_REG_IMM_COND(rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_TEQ, 0, rn, imm8, rot, cond)
+#define _TEQ_REG_IMM(rn, imm8, rot) \
+	_TEQ_REG_IMM_COND(rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* PSR := TEQ Rn, imm8 */
+#define ARM_TEQ_REG_IMM8_COND(p, rn, imm8, cond) \
+	ARM_TEQ_REG_IMM_COND(p, rn, imm8, 0, cond)
+#define ARM_TEQ_REG_IMM8(p, rn, imm8) \
+	ARM_TEQ_REG_IMM8_COND(p, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TEQ_REG_IMM8_COND(rn, imm8, cond) \
+	_TEQ_REG_IMM_COND(rn, imm8, 0, cond)
+#define _TEQ_REG_IMM8(rn, imm8) \
+	_TEQ_REG_IMM8_COND(rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* PSR := TEQ Rn, Rm */
+#define ARM_TEQ_REG_REG_COND(p, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_TEQ, 0, rn, rm, cond)
+#define ARM_TEQ_REG_REG(p, rn, rm) \
+	ARM_TEQ_REG_REG_COND(p, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TEQ_REG_REG_COND(rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_TEQ, 0, rn, rm, cond)
+#define _TEQ_REG_REG(rn, rm) \
+	_TEQ_REG_REG_COND(rn, rm, ARMCOND_AL)
+#endif
+
+
+/* PSR := TEQ Rn, (Rm <shift_type> imm8) */
+#define ARM_TEQ_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_TEQ, 0, rn, rm, shift_type, imm_shift, cond)
+#define ARM_TEQ_REG_IMMSHIFT(p, rn, rm, shift_type, imm_shift) \
+	ARM_TEQ_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _TEQ_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_TEQ, 0, rn, rm, shift_type, imm_shift, cond)
+#define _TEQ_REG_IMMSHIFT(rn, rm, shift_type, imm_shift) \
+	_TEQ_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMP Rn, (imm8 ROR 2*rot) */
+#define ARM_CMP_REG_IMM_COND(p, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_CMP, 0, rn, imm8, rot, cond)
+#define ARM_CMP_REG_IMM(p, rn, imm8, rot) \
+	ARM_CMP_REG_IMM_COND(p, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMP_REG_IMM_COND(rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_CMP, 0, rn, imm8, rot, cond)
+#define _CMP_REG_IMM(rn, imm8, rot) \
+	_CMP_REG_IMM_COND(rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMP Rn, imm8 */
+#define ARM_CMP_REG_IMM8_COND(p, rn, imm8, cond) \
+	ARM_CMP_REG_IMM_COND(p, rn, imm8, 0, cond)
+#define ARM_CMP_REG_IMM8(p, rn, imm8) \
+	ARM_CMP_REG_IMM8_COND(p, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMP_REG_IMM8_COND(rn, imm8, cond) \
+	_CMP_REG_IMM_COND(rn, imm8, 0, cond)
+#define _CMP_REG_IMM8(rn, imm8) \
+	_CMP_REG_IMM8_COND(rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMP Rn, Rm */
+#define ARM_CMP_REG_REG_COND(p, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_CMP, 0, rn, rm, cond)
+#define ARM_CMP_REG_REG(p, rn, rm) \
+	ARM_CMP_REG_REG_COND(p, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMP_REG_REG_COND(rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_CMP, 0, rn, rm, cond)
+#define _CMP_REG_REG(rn, rm) \
+	_CMP_REG_REG_COND(rn, rm, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMP Rn, (Rm <shift_type> imm8) */
+#define ARM_CMP_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_CMP, 0, rn, rm, shift_type, imm_shift, cond)
+#define ARM_CMP_REG_IMMSHIFT(p, rn, rm, shift_type, imm_shift) \
+	ARM_CMP_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMP_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_CMP, 0, rn, rm, shift_type, imm_shift, cond)
+#define _CMP_REG_IMMSHIFT(rn, rm, shift_type, imm_shift) \
+	_CMP_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMN Rn, (imm8 ROR 2*rot) */
+#define ARM_CMN_REG_IMM_COND(p, rn, imm8, rot, cond) \
+	ARM_DPIOP_S_REG_IMM8ROT_COND(p, ARMOP_CMN, 0, rn, imm8, rot, cond)
+#define ARM_CMN_REG_IMM(p, rn, imm8, rot) \
+	ARM_CMN_REG_IMM_COND(p, rn, imm8, rot, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMN_REG_IMM_COND(rn, imm8, rot, cond) \
+	ARM_IASM_DPIOP_S_REG_IMM8ROT_COND(ARMOP_CMN, 0, rn, imm8, rot, cond)
+#define _CMN_REG_IMM(rn, imm8, rot) \
+	_CMN_REG_IMM_COND(rn, imm8, rot, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMN Rn, imm8 */
+#define ARM_CMN_REG_IMM8_COND(p, rn, imm8, cond) \
+	ARM_CMN_REG_IMM_COND(p, rn, imm8, 0, cond)
+#define ARM_CMN_REG_IMM8(p, rn, imm8) \
+	ARM_CMN_REG_IMM8_COND(p, rn, imm8, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMN_REG_IMM8_COND(rn, imm8, cond) \
+	_CMN_REG_IMM_COND(rn, imm8, 0, cond)
+#define _CMN_REG_IMM8(rn, imm8) \
+	_CMN_REG_IMM8_COND(rn, imm8, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMN Rn, Rm */
+#define ARM_CMN_REG_REG_COND(p, rn, rm, cond) \
+	ARM_DPIOP_S_REG_REG_COND(p, ARMOP_CMN, 0, rn, rm, cond)
+#define ARM_CMN_REG_REG(p, rn, rm) \
+	ARM_CMN_REG_REG_COND(p, rn, rm, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMN_REG_REG_COND(rn, rm, cond) \
+	ARM_IASM_DPIOP_S_REG_REG_COND(ARMOP_CMN, 0, rn, rm, cond)
+#define _CMN_REG_REG(rn, rm) \
+	_CMN_REG_REG_COND(rn, rm, ARMCOND_AL)
+#endif
+
+
+/* PSR := CMN Rn, (Rm <shift_type> imm8) */
+#define ARM_CMN_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, cond) \
+	ARM_DPIOP_S_REG_IMMSHIFT_COND(p, ARMOP_CMN, 0, rn, rm, shift_type, imm_shift, cond)
+#define ARM_CMN_REG_IMMSHIFT(p, rn, rm, shift_type, imm_shift) \
+	ARM_CMN_REG_IMMSHIFT_COND(p, rn, rm, shift_type, imm_shift, ARMCOND_AL)
+
+#ifndef ARM_NOIASM
+#define _CMN_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, cond) \
+	ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND(ARMOP_CMN, 0, rn, rm, shift_type, imm_shift, cond)
+#define _CMN_REG_IMMSHIFT(rn, rm, shift_type, imm_shift) \
+	_CMN_REG_IMMSHIFT_COND(rn, rm, shift_type, imm_shift, ARMCOND_AL)
+#endif
+
+
+
+/* end generated */
+
diff --git a/platforms/android/include/arm_fpamacros.h b/platforms/android/include/arm_fpamacros.h
new file mode 100644
index 0000000..5de16f2
--- /dev/null
+++ b/platforms/android/include/arm_fpamacros.h
@@ -0,0 +1,419 @@
+/* Macros for FPA ops, auto-generated from template */
+
+
+/* dyadic */
+
+/* -- ADF -- */
+
+
+/* Fd := Rn ADF Rm */
+#define ARM_FPA_ADFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_ADF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_ADFD(p, rd, rn, rm) \
+	ARM_FPA_ADFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_ADFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_ADF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_ADFS(p, rd, rn, rm) \
+	ARM_FPA_ADFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- MUF -- */
+
+
+/* Fd := Rn MUF Rm */
+#define ARM_FPA_MUFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_MUF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_MUFD(p, rd, rn, rm) \
+	ARM_FPA_MUFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_MUFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_MUF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_MUFS(p, rd, rn, rm) \
+	ARM_FPA_MUFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- SUF -- */
+
+
+/* Fd := Rn SUF Rm */
+#define ARM_FPA_SUFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_SUF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_SUFD(p, rd, rn, rm) \
+	ARM_FPA_SUFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_SUFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_SUF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_SUFS(p, rd, rn, rm) \
+	ARM_FPA_SUFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- RSF -- */
+
+
+/* Fd := Rn RSF Rm */
+#define ARM_FPA_RSFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RSF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_RSFD(p, rd, rn, rm) \
+	ARM_FPA_RSFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_RSFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RSF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_RSFS(p, rd, rn, rm) \
+	ARM_FPA_RSFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- DVF -- */
+
+
+/* Fd := Rn DVF Rm */
+#define ARM_FPA_DVFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_DVF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_DVFD(p, rd, rn, rm) \
+	ARM_FPA_DVFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_DVFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_DVF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_DVFS(p, rd, rn, rm) \
+	ARM_FPA_DVFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- RDF -- */
+
+
+/* Fd := Rn RDF Rm */
+#define ARM_FPA_RDFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RDF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_RDFD(p, rd, rn, rm) \
+	ARM_FPA_RDFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_RDFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RDF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_RDFS(p, rd, rn, rm) \
+	ARM_FPA_RDFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- POW -- */
+
+
+/* Fd := Rn POW Rm */
+#define ARM_FPA_POWD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_POW,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_POWD(p, rd, rn, rm) \
+	ARM_FPA_POWD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_POWS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_POW,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_POWS(p, rd, rn, rm) \
+	ARM_FPA_POWS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- RPW -- */
+
+
+/* Fd := Rn RPW Rm */
+#define ARM_FPA_RPWD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RPW,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_RPWD(p, rd, rn, rm) \
+	ARM_FPA_RPWD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_RPWS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RPW,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_RPWS(p, rd, rn, rm) \
+	ARM_FPA_RPWS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- RMF -- */
+
+
+/* Fd := Rn RMF Rm */
+#define ARM_FPA_RMFD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RMF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_RMFD(p, rd, rn, rm) \
+	ARM_FPA_RMFD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_RMFS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_RMF,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_RMFS(p, rd, rn, rm) \
+	ARM_FPA_RMFS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- FML -- */
+
+
+/* Fd := Rn FML Rm */
+#define ARM_FPA_FMLD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FML,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_FMLD(p, rd, rn, rm) \
+	ARM_FPA_FMLD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_FMLS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FML,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_FMLS(p, rd, rn, rm) \
+	ARM_FPA_FMLS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- FDV -- */
+
+
+/* Fd := Rn FDV Rm */
+#define ARM_FPA_FDVD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FDV,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_FDVD(p, rd, rn, rm) \
+	ARM_FPA_FDVD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_FDVS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FDV,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_FDVS(p, rd, rn, rm) \
+	ARM_FPA_FDVS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- FRD -- */
+
+
+/* Fd := Rn FRD Rm */
+#define ARM_FPA_FRDD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FRD,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_FRDD(p, rd, rn, rm) \
+	ARM_FPA_FRDD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_FRDS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_FRD,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_FRDS(p, rd, rn, rm) \
+	ARM_FPA_FRDS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- POL -- */
+
+
+/* Fd := Rn POL Rm */
+#define ARM_FPA_POLD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_POL,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_FPA_POLD(p, rd, rn, rm) \
+	ARM_FPA_POLD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_FPA_POLS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_FPA_CPDO_DYADIC(cond,ARM_FPA_POL,rd,rn,rm,ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_FPA_POLS(p, rd, rn, rm) \
+	ARM_FPA_POLS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+
+/* monadic */
+
+/* -- MVF -- */
+
+
+/* Fd := MVF Rm */
+
+#define ARM_MVFD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_MVF,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_MVFD(p,dreg,sreg)      ARM_MVFD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_MVFS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_MVF,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_MVFS(p,dreg,sreg)      ARM_MVFS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- MNF -- */
+
+
+/* Fd := MNF Rm */
+
+#define ARM_MNFD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_MNF,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_MNFD(p,dreg,sreg)      ARM_MNFD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_MNFS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_MNF,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_MNFS(p,dreg,sreg)      ARM_MNFS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- ABS -- */
+
+
+/* Fd := ABS Rm */
+
+#define ARM_ABSD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ABS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_ABSD(p,dreg,sreg)      ARM_ABSD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_ABSS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ABS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_ABSS(p,dreg,sreg)      ARM_ABSS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- RND -- */
+
+
+/* Fd := RND Rm */
+
+#define ARM_RNDD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_RND,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_RNDD(p,dreg,sreg)      ARM_RNDD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_RNDS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_RND,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_RNDS(p,dreg,sreg)      ARM_RNDS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- SQT -- */
+
+
+/* Fd := SQT Rm */
+
+#define ARM_SQTD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_SQT,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_SQTD(p,dreg,sreg)      ARM_SQTD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_SQTS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_SQT,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_SQTS(p,dreg,sreg)      ARM_SQTS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- LOG -- */
+
+
+/* Fd := LOG Rm */
+
+#define ARM_LOGD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_LOG,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_LOGD(p,dreg,sreg)      ARM_LOGD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_LOGS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_LOG,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_LOGS(p,dreg,sreg)      ARM_LOGS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- EXP -- */
+
+
+/* Fd := EXP Rm */
+
+#define ARM_EXPD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_EXP,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_EXPD(p,dreg,sreg)      ARM_EXPD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_EXPS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_EXP,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_EXPS(p,dreg,sreg)      ARM_EXPS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- SIN -- */
+
+
+/* Fd := SIN Rm */
+
+#define ARM_SIND_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_SIN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_SIND(p,dreg,sreg)      ARM_SIND_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_SINS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_SIN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_SINS(p,dreg,sreg)      ARM_SINS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- COS -- */
+
+
+/* Fd := COS Rm */
+
+#define ARM_COSD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_COS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_COSD(p,dreg,sreg)      ARM_COSD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_COSS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_COS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_COSS(p,dreg,sreg)      ARM_COSS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- TAN -- */
+
+
+/* Fd := TAN Rm */
+
+#define ARM_TAND_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_TAN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_TAND(p,dreg,sreg)      ARM_TAND_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_TANS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_TAN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_TANS(p,dreg,sreg)      ARM_TANS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- ASN -- */
+
+
+/* Fd := ASN Rm */
+
+#define ARM_ASND_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ASN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_ASND(p,dreg,sreg)      ARM_ASND_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_ASNS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ASN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_ASNS(p,dreg,sreg)      ARM_ASNS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- ACS -- */
+
+
+/* Fd := ACS Rm */
+
+#define ARM_ACSD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ACS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_ACSD(p,dreg,sreg)      ARM_ACSD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_ACSS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ACS,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_ACSS(p,dreg,sreg)      ARM_ACSS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- ATN -- */
+
+
+/* Fd := ATN Rm */
+
+#define ARM_ATND_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ATN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_ATND(p,dreg,sreg)      ARM_ATND_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_ATNS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_ATN,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_ATNS(p,dreg,sreg)      ARM_ATNS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- URD -- */
+
+
+/* Fd := URD Rm */
+
+#define ARM_URDD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_URD,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_URDD(p,dreg,sreg)      ARM_URDD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_URDS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_URD,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_URDS(p,dreg,sreg)      ARM_URDS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- NRM -- */
+
+
+/* Fd := NRM Rm */
+
+#define ARM_NRMD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_NRM,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_DOUBLE))
+#define ARM_NRMD(p,dreg,sreg)      ARM_NRMD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_NRMS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_FPA_CPDO_MONADIC((cond),ARM_FPA_NRM,(dreg),(sreg),ARM_FPA_ROUND_NEAREST,ARM_FPA_ROUND_SINGLE))
+#define ARM_NRMS(p,dreg,sreg)      ARM_NRMS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+
+
+
+
+/* end generated */
+
diff --git a/platforms/android/include/arm_vfpmacros.h b/platforms/android/include/arm_vfpmacros.h
new file mode 100644
index 0000000..f502645
--- /dev/null
+++ b/platforms/android/include/arm_vfpmacros.h
@@ -0,0 +1,299 @@
+/* Macros for VFP ops, auto-generated from template */
+
+
+/* dyadic */
+
+/* -- ADD -- */
+
+
+/* Fd := Fn ADD Fm */
+#define ARM_VFP_ADDD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_DOUBLE,ARM_VFP_ADD,rd,rn,rm))
+#define ARM_VFP_ADDD(p, rd, rn, rm) \
+	ARM_VFP_ADDD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_VFP_ADDS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_SINGLE,ARM_VFP_ADD,rd,rn,rm))
+#define ARM_VFP_ADDS(p, rd, rn, rm) \
+	ARM_VFP_ADDS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- SUB -- */
+
+
+/* Fd := Fn SUB Fm */
+#define ARM_VFP_SUBD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_DOUBLE,ARM_VFP_SUB,rd,rn,rm))
+#define ARM_VFP_SUBD(p, rd, rn, rm) \
+	ARM_VFP_SUBD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_VFP_SUBS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_SINGLE,ARM_VFP_SUB,rd,rn,rm))
+#define ARM_VFP_SUBS(p, rd, rn, rm) \
+	ARM_VFP_SUBS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- MUL -- */
+
+
+/* Fd := Fn MUL Fm */
+#define ARM_VFP_MULD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_DOUBLE,ARM_VFP_MUL,rd,rn,rm))
+#define ARM_VFP_MULD(p, rd, rn, rm) \
+	ARM_VFP_MULD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_VFP_MULS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_SINGLE,ARM_VFP_MUL,rd,rn,rm))
+#define ARM_VFP_MULS(p, rd, rn, rm) \
+	ARM_VFP_MULS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- NMUL -- */
+
+
+/* Fd := Fn NMUL Fm */
+#define ARM_VFP_NMULD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_DOUBLE,ARM_VFP_NMUL,rd,rn,rm))
+#define ARM_VFP_NMULD(p, rd, rn, rm) \
+	ARM_VFP_NMULD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_VFP_NMULS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_SINGLE,ARM_VFP_NMUL,rd,rn,rm))
+#define ARM_VFP_NMULS(p, rd, rn, rm) \
+	ARM_VFP_NMULS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+/* -- DIV -- */
+
+
+/* Fd := Fn DIV Fm */
+#define ARM_VFP_DIVD_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_DOUBLE,ARM_VFP_DIV,rd,rn,rm))
+#define ARM_VFP_DIVD(p, rd, rn, rm) \
+	ARM_VFP_DIVD_COND(p, rd, rn, rm, ARMCOND_AL)
+
+#define ARM_VFP_DIVS_COND(p, rd, rn, rm, cond) \
+	ARM_EMIT((p), ARM_DEF_VFP_DYADIC(cond,ARM_VFP_COPROC_SINGLE,ARM_VFP_DIV,rd,rn,rm))
+#define ARM_VFP_DIVS(p, rd, rn, rm) \
+	ARM_VFP_DIVS_COND(p, rd, rn, rm, ARMCOND_AL)
+
+
+
+/* monadic */
+
+/* -- CPY -- */
+
+
+/* Fd := CPY Fm */
+
+#define ARM_CPYD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CPY,(dreg),(sreg)))
+#define ARM_CPYD(p,dreg,sreg)      ARM_CPYD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CPYS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CPY,(dreg),(sreg)))
+#define ARM_CPYS(p,dreg,sreg)      ARM_CPYS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- ABS -- */
+
+
+/* Fd := ABS Fm */
+
+#define ARM_ABSD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_ABS,(dreg),(sreg)))
+#define ARM_ABSD(p,dreg,sreg)      ARM_ABSD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_ABSS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_ABS,(dreg),(sreg)))
+#define ARM_ABSS(p,dreg,sreg)      ARM_ABSS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- NEG -- */
+
+
+/* Fd := NEG Fm */
+
+#define ARM_NEGD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_NEG,(dreg),(sreg)))
+#define ARM_NEGD(p,dreg,sreg)      ARM_NEGD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_NEGS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_NEG,(dreg),(sreg)))
+#define ARM_NEGS(p,dreg,sreg)      ARM_NEGS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- SQRT -- */
+
+
+/* Fd := SQRT Fm */
+
+#define ARM_SQRTD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_SQRT,(dreg),(sreg)))
+#define ARM_SQRTD(p,dreg,sreg)      ARM_SQRTD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_SQRTS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_SQRT,(dreg),(sreg)))
+#define ARM_SQRTS(p,dreg,sreg)      ARM_SQRTS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- CMP -- */
+
+
+/* Fd := CMP Fm */
+
+#define ARM_CMPD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CMP,(dreg),(sreg)))
+#define ARM_CMPD(p,dreg,sreg)      ARM_CMPD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CMPS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CMP,(dreg),(sreg)))
+#define ARM_CMPS(p,dreg,sreg)      ARM_CMPS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- CMPE -- */
+
+
+/* Fd := CMPE Fm */
+
+#define ARM_CMPED_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CMPE,(dreg),(sreg)))
+#define ARM_CMPED(p,dreg,sreg)      ARM_CMPED_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CMPES_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CMPE,(dreg),(sreg)))
+#define ARM_CMPES(p,dreg,sreg)      ARM_CMPES_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- CMPZ -- */
+
+
+/* Fd := CMPZ Fm */
+
+#define ARM_CMPZD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CMPZ,(dreg),(sreg)))
+#define ARM_CMPZD(p,dreg,sreg)      ARM_CMPZD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CMPZS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CMPZ,(dreg),(sreg)))
+#define ARM_CMPZS(p,dreg,sreg)      ARM_CMPZS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- CMPEZ -- */
+
+
+/* Fd := CMPEZ Fm */
+
+#define ARM_CMPEZD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CMPEZ,(dreg),(sreg)))
+#define ARM_CMPEZD(p,dreg,sreg)      ARM_CMPEZD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CMPEZS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CMPEZ,(dreg),(sreg)))
+#define ARM_CMPEZS(p,dreg,sreg)      ARM_CMPEZS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- CVT -- */
+
+
+/* Fd := CVT Fm */
+
+#define ARM_CVTD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_CVT,(dreg),(sreg)))
+#define ARM_CVTD(p,dreg,sreg)      ARM_CVTD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_CVTS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_CVT,(dreg),(sreg)))
+#define ARM_CVTS(p,dreg,sreg)      ARM_CVTS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- UITO -- */
+
+
+/* Fd := UITO Fm */
+
+#define ARM_UITOD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_UITO,(dreg),(sreg)))
+#define ARM_UITOD(p,dreg,sreg)      ARM_UITOD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_UITOS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_UITO,(dreg),(sreg)))
+#define ARM_UITOS(p,dreg,sreg)      ARM_UITOS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- SITO -- */
+
+
+/* Fd := SITO Fm */
+
+#define ARM_SITOD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_SITO,(dreg),(sreg)))
+#define ARM_SITOD(p,dreg,sreg)      ARM_SITOD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_SITOS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_SITO,(dreg),(sreg)))
+#define ARM_SITOS(p,dreg,sreg)      ARM_SITOS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- TOUI -- */
+
+
+/* Fd := TOUI Fm */
+
+#define ARM_TOUID_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_TOUI,(dreg),(sreg)))
+#define ARM_TOUID(p,dreg,sreg)      ARM_TOUID_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_TOUIS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_TOUI,(dreg),(sreg)))
+#define ARM_TOUIS(p,dreg,sreg)      ARM_TOUIS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- TOSI -- */
+
+
+/* Fd := TOSI Fm */
+
+#define ARM_TOSID_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_TOSI,(dreg),(sreg)))
+#define ARM_TOSID(p,dreg,sreg)      ARM_TOSID_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_TOSIS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_TOSI,(dreg),(sreg)))
+#define ARM_TOSIS(p,dreg,sreg)      ARM_TOSIS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- TOUIZ -- */
+
+
+/* Fd := TOUIZ Fm */
+
+#define ARM_TOUIZD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_TOUIZ,(dreg),(sreg)))
+#define ARM_TOUIZD(p,dreg,sreg)      ARM_TOUIZD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_TOUIZS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_TOUIZ,(dreg),(sreg)))
+#define ARM_TOUIZS(p,dreg,sreg)      ARM_TOUIZS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+/* -- TOSIZ -- */
+
+
+/* Fd := TOSIZ Fm */
+
+#define ARM_TOSIZD_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_DOUBLE,ARM_VFP_TOSIZ,(dreg),(sreg)))
+#define ARM_TOSIZD(p,dreg,sreg)      ARM_TOSIZD_COND(p,dreg,sreg,ARMCOND_AL)
+
+#define ARM_TOSIZS_COND(p,dreg,sreg,cond) \
+        ARM_EMIT((p), ARM_DEF_VFP_MONADIC((cond),ARM_VFP_COPROC_SINGLE,ARM_VFP_TOSIZ,(dreg),(sreg)))
+#define ARM_TOSIZS(p,dreg,sreg)      ARM_TOSIZS_COND(p,dreg,sreg,ARMCOND_AL)
+
+
+
+
+
+
+/* end generated */
+
diff --git a/platforms/android/include/cpu-arm.h b/platforms/android/include/cpu-arm.h
new file mode 100644
index 0000000..2809082
--- /dev/null
+++ b/platforms/android/include/cpu-arm.h
@@ -0,0 +1,776 @@
+/* File automatically generated by genmdesc, don't change */
+
+const char arm_cpu_desc [] = {
+	"\x0\x0\x0\x0\x0\x0"	/* null entry */
+	"\x0" "\x0" "\x0" "\x0" "\x4" "\x0" ""	/* nop */
+	"\x0" "\x0" "\x0" "\x0" "\x4" "\x0" ""	/* relaxed_nop */
+	"\x0" "ii\x0" "\x4" "\x0" ""	/* compare */
+	"\x0" "i\x0" "\x0" "\xc" "\x0" ""	/* compare_imm */
+	"\x0" "ff\x0" "\xc" "\x0" ""	/* fcompare */
+	"\x0" "ii\x0" "\x4" "\x0" ""	/* icompare */
+	"\x0" "i\x0" "\x0" "\xc" "\x0" ""	/* icompare_imm */
+	"\x0" "f\x0" "\x0" "\xc" "\x0" ""	/* setfret */
+	"\x0" "ii\x0" "\xc" "\x0" ""	/* setlret */
+	"ii\x0" "\x0" "\x3c" "\x0" ""	/* localloc */
+	"\x0" "b\x0" "\x0" "\x4" "\x0" ""	/* checkthis */
+	"\x0" "\x0" "\x0" "\x0" "\x26" "\x0" ""	/* seq_point */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "c"	/* voidcall */
+	"\x0" "i\x0" "\x0" "\x8" "c"	/* voidcall_reg */
+	"\x0" "b\x0" "\x0" "\xc" "c"	/* voidcall_membase */
+	"a\x0" "\x0" "\x0" "\x14" "c"	/* call */
+	"ai\x0" "\x0" "\x8" "c"	/* call_reg */
+	"ab\x0" "\x0" "\xc" "c"	/* call_membase */
+	"g\x0" "\x0" "\x0" "\x1c" "c"	/* fcall */
+	"gi\x0" "\x0" "\x10" "c"	/* fcall_reg */
+	"gb\x0" "\x0" "\x14" "c"	/* fcall_membase */
+	"l\x0" "\x0" "\x0" "\x14" "c"	/* lcall */
+	"li\x0" "\x0" "\x8" "c"	/* lcall_reg */
+	"lb\x0" "\x0" "\xc" "c"	/* lcall_membase */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "c"	/* vcall */
+	"\x0" "i\x0" "\x0" "\x8" "c"	/* vcall_reg */
+	"\x0" "b\x0" "\x0" "\xc" "c"	/* vcall_membase */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "c"	/* vcall2 */
+	"\x0" "i\x0" "\x0" "\x8" "c"	/* vcall2_reg */
+	"\x0" "b\x0" "\x0" "\xc" "c"	/* vcall2_membase */
+	"\x0" "ii\x0" "\x80" "c"	/* dyn_call */
+	"i\x0" "\x0" "\x0" "\x10" "\x0" ""	/* iconst */
+	"f\x0" "\x0" "\x0" "\x14" "\x0" ""	/* r4const */
+	"f\x0" "\x0" "\x0" "\x14" "\x0" ""	/* r8const */
+	"\x0" "\x0" "\x0" "\x0" "\x0" "\x0" ""	/* label */
+	"\x0" "i\x0" "\x0" "\x8" "\x0" ""	/* switch */
+	"\x0" "i\x0" "\x0" "\x18" "\x0" ""	/* throw */
+	"\x0" "i\x0" "\x0" "\x14" "\x0" ""	/* rethrow */
+	"\x0" "i\x0" "\x0" "\xc" "\x0" ""	/* oparglist */
+	"bi\x0" "\x0" "\x14" "\x0" ""	/* store_membase_reg */
+	"bi\x0" "\x0" "\xc" "\x0" ""	/* storei1_membase_reg */
+	"bi\x0" "\x0" "\xc" "\x0" ""	/* storei2_membase_reg */
+	"bi\x0" "\x0" "\x14" "\x0" ""	/* storei4_membase_reg */
+	"bi\x0" "\x0" "\x0" "\x0" ""	/* storei8_membase_reg */
+	"bf\x0" "\x0" "\xc" "\x0" ""	/* storer4_membase_reg */
+	"bf\x0" "\x0" "\x18" "\x0" ""	/* storer8_membase_reg */
+	"b\x0" "\x0" "\x0" "\x14" "\x0" ""	/* store_membase_imm */
+	"b\x0" "\x0" "\x0" "\x14" "\x0" ""	/* storei1_membase_imm */
+	"b\x0" "\x0" "\x0" "\x14" "\x0" ""	/* storei2_membase_imm */
+	"b\x0" "\x0" "\x0" "\x14" "\x0" ""	/* storei4_membase_imm */
+	"b\x0" "\x0" "\x0" "\x0" "\x0" ""	/* storei8_membase_imm */
+	"ib\x0" "\x0" "\x14" "\x0" ""	/* load_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadi1_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadu1_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadi2_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadu2_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadi4_membase */
+	"ib\x0" "\x0" "\x4" "\x0" ""	/* loadu4_membase */
+	"ib\x0" "\x0" "\x0" "\x0" ""	/* loadi8_membase */
+	"fb\x0" "\x0" "\x8" "\x0" ""	/* loadr4_membase */
+	"fb\x0" "\x0" "\x18" "\x0" ""	/* loadr8_membase */
+	"ibi\x0" "\x4" "\x0" ""	/* load_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadi1_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadu1_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadi2_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadu2_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadi4_memindex */
+	"ibi\x0" "\x4" "\x0" ""	/* loadu4_memindex */
+	"bii\x0" "\x4" "\x0" ""	/* store_memindex */
+	"bii\x0" "\x4" "\x0" ""	/* storei1_memindex */
+	"bii\x0" "\x4" "\x0" ""	/* storei2_memindex */
+	"bii\x0" "\x4" "\x0" ""	/* storei4_memindex */
+	"i\x0" "\x0" "\x0" "\x8" "\x0" ""	/* loadu4_mem */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* move */
+	"ff\x0" "\x0" "\x4" "\x0" ""	/* fmove */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* add_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* sub_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* mul_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* and_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* or_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* xor_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* shl_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* shr_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* shr_un_imm */
+	"\x0" "\x0" "\x0" "\x0" "\x4" "\x0" ""	/* br */
+	"\x0" "\x0" "\x0" "\x0" "\x5c" "\x0" ""	/* jmp */
+	"\x0" "\x0" "\x0" "\x0" "\x4" "\x0" ""	/* break */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* ceq */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cgt */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cgt.un */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* clt */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* clt.un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_eq */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ge */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_gt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_le */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_lt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ne_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ge_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_gt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_le_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_lt_un */
+	"\x0" "\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cond_exc_ov */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_no */
+	"\x0" "\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cond_exc_c */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_nc */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ieq */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ige */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_igt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ile */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ilt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ine_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ige_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_igt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ile_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ilt_un */
+	"\x0" "\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cond_exc_iov */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_ino */
+	"\x0" "\x0" "\x0" "\x0" "\xc" "\x0" ""	/* cond_exc_ic */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* cond_exc_inc */
+	"iii\x0" "\x24" "\x0" ""	/* long_conv_to_ovf_i4_2 */
+	"iii\x0" "\x4" "\x0" ""	/* int_add */
+	"iii\x0" "\x4" "\x0" ""	/* int_sub */
+	"iii\x0" "\x4" "\x0" ""	/* int_mul */
+	"iii\x0" "\x28" "\x0" ""	/* int_div */
+	"iii\x0" "\x10" "\x0" ""	/* int_div_un */
+	"iii\x0" "\x30" "\x0" ""	/* int_rem */
+	"iii\x0" "\x18" "\x0" ""	/* int_rem_un */
+	"iii\x0" "\x4" "\x0" ""	/* int_and */
+	"iii\x0" "\x4" "\x0" ""	/* int_or */
+	"iii\x0" "\x4" "\x0" ""	/* int_xor */
+	"iii\x0" "\x4" "\x0" ""	/* int_shl */
+	"iii\x0" "\x4" "\x0" ""	/* int_shr */
+	"iii\x0" "\x4" "\x0" ""	/* int_shr_un */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* int_neg */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* int_not */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_conv_to_i1 */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_conv_to_i2 */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* int_conv_to_i4 */
+	"fi\x0" "\x0" "\x24" "\x0" ""	/* int_conv_to_r4 */
+	"fi\x0" "\x0" "\x24" "\x0" ""	/* int_conv_to_r8 */
+	"ii\x0" "\x0" "\x0" "\x0" ""	/* int_conv_to_u4 */
+	"fi\x0" "\x0" "\x38" "\x0" ""	/* int_conv_to_r_un */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_conv_to_u2 */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* int_conv_to_u1 */
+	"iii\x0" "\x10" "\x0" ""	/* int_add_ovf */
+	"iii\x0" "\x10" "\x0" ""	/* int_add_ovf_un */
+	"iii\x0" "\x10" "\x0" ""	/* int_mul_ovf */
+	"iii\x0" "\x10" "\x0" ""	/* int_mul_ovf_un */
+	"iii\x0" "\x10" "\x0" ""	/* int_sub_ovf */
+	"iii\x0" "\x10" "\x0" ""	/* int_sub_ovf_un */
+	"iii\x0" "\x4" "\x0" ""	/* int_adc */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_adc_imm */
+	"iii\x0" "\x4" "\x0" ""	/* int_sbb */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_sbb_imm */
+	"iii\x0" "\x4" "\x0" ""	/* int_addcc */
+	"iii\x0" "\x4" "\x0" ""	/* int_subcc */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_add_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_sub_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_mul_imm */
+	"ii\x0" "\x0" "\x14" "\x0" ""	/* int_div_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_div_un_imm */
+	"ii\x0" "\x0" "\x1c" "\x0" ""	/* int_rem_imm */
+	"ii\x0" "\x0" "\x10" "\x0" ""	/* int_rem_un_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_and_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_or_imm */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* int_xor_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_shl_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_shr_imm */
+	"ii\x0" "\x0" "\x8" "\x0" ""	/* int_shr_un_imm */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* int_ceq */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* int_cgt */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* int_cgt_un */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* int_clt */
+	"i\x0" "\x0" "\x0" "\xc" "\x0" ""	/* int_clt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_beq */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_bge */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_bgt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_ble */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_blt */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_bne_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_bge_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_bgt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_ble_un */
+	"\x0" "\x0" "\x0" "\x0" "\x8" "\x0" ""	/* int_blt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_beq */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_bge */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_bgt */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_ble */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_blt */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_bne_un */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_bge_un */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_bgt_un */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_ble_un */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* float_blt_un */
+	"fff\x0" "\x4" "\x0" ""	/* float_add */
+	"fff\x0" "\x4" "\x0" ""	/* float_sub */
+	"fff\x0" "\x4" "\x0" ""	/* float_mul */
+	"fff\x0" "\x4" "\x0" ""	/* float_div */
+	"fff\x0" "\x4" "\x0" ""	/* float_div_un */
+	"fff\x0" "\x10" "\x0" ""	/* float_rem */
+	"fff\x0" "\x10" "\x0" ""	/* float_rem_un */
+	"ff\x0" "\x0" "\x4" "\x0" ""	/* float_neg */
+	"ff\x0" "\x0" "\x4" "\x0" ""	/* float_not */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_i1 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_i2 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_i4 */
+	"lf\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_i8 */
+	"ff\x0" "\x0" "\x8" "\x0" ""	/* float_conv_to_r4 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_u4 */
+	"lf\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_u8 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_u2 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_u1 */
+	"if\x0" "\x0" "\x28" "\x0" ""	/* float_conv_to_i */
+	"iff\x0" "\x10" "\x0" ""	/* float_ceq */
+	"iff\x0" "\x10" "\x0" ""	/* float_cgt */
+	"iff\x0" "\x14" "\x0" ""	/* float_cgt_un */
+	"iff\x0" "\x10" "\x0" ""	/* float_clt */
+	"iff\x0" "\x14" "\x0" ""	/* float_clt_un */
+	"if\x0" "\x0" "\x24" "\x0" ""	/* float_conv_to_u */
+	"ff\x0" "\x0" "\x40" "\x0" ""	/* ckfinite */
+	"i\x0" "\x0" "\x0" "\x10" "\x0" ""	/* aot_const */
+	"\x0" "\x0" "\x0" "\x0" "\xc" "c"	/* call_handler */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* start_handler */
+	"\x0" "i\x0" "\x0" "\x10" "\x0" ""	/* endfilter */
+	"\x0" "\x0" "\x0" "\x0" "\x14" "\x0" ""	/* endfinally */
+	"lii\x0" "\x8" "\x0" ""	/* bigmul */
+	"lii\x0" "\x8" "\x0" ""	/* bigmul_un */
+	"iii\x0" "\x4" "\x0" ""	/* adc */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* adc_imm */
+	"iii\x0" "\x4" "\x0" ""	/* sbb */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* sbb_imm */
+	"iii\x0" "\x4" "\x0" ""	/* addcc */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* addcc_imm */
+	"iii\x0" "\x4" "\x0" ""	/* subcc */
+	"ii\x0" "\x0" "\xc" "\x0" ""	/* subcc_imm */
+	"\x0" "i\x0" "\x0" "\x8" "\x0" ""	/* br_reg */
+	"iii\x0" "\x10" "\x0" ""	/* add_ovf_carry */
+	"iii\x0" "\x10" "\x0" ""	/* sub_ovf_carry */
+	"iii\x0" "\x10" "\x0" ""	/* add_ovf_un_carry */
+	"iii\x0" "\x10" "\x0" ""	/* sub_ovf_un_carry */
+	"ff\x0" "\x0" "\x4" "\x0" ""	/* sqrt */
+	"i\x0" "\x0" "\x0" "\x8" "\x0" ""	/* tls_get */
+	"\x0" "i\x0" "\x0" "\x0" "\x0" ""	/* dummy_use */
+	"\x0" "\x0" "\x0" "\x0" "\x0" "\x0" ""	/* dummy_store */
+	"\x0" "\x0" "\x0" "\x0" "\x0" "\x0" ""	/* not_reached */
+	"\x0" "i\x0" "\x0" "\x0" "\x0" ""	/* not_null */
+	"\x0" "\x0" "\x0" "\x0" "\x4" "\x0" ""	/* memory_barrier */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* arm_rsbs_imm */
+	"ii\x0" "\x0" "\x4" "\x0" ""	/* arm_rsc_imm */
+};
+
+const guint16 arm_cpu_desc_idx [] = {
+	0,	/* load */
+	0,	/* ldaddr */
+	0,	/* store */
+	6,	/* nop */
+	0,	/* hard_nop */
+	12,	/* relaxed_nop */
+	0,	/* phi */
+	0,	/* fphi */
+	0,	/* vphi */
+	18,	/* compare */
+	24,	/* compare_imm */
+	30,	/* fcompare */
+	0,	/* lcompare */
+	36,	/* icompare */
+	42,	/* icompare_imm */
+	0,	/* lcompare_imm */
+	0,	/* local */
+	0,	/* arg */
+	0,	/* outarg_vt */
+	0,	/* outarg_vtretaddr */
+	0,	/* setret */
+	48,	/* setfret */
+	54,	/* setlret */
+	60,	/* localloc */
+	0,	/* localloc_imm */
+	66,	/* checkthis */
+	72,	/* seq_point */
+	0,	/* implicit_exception */
+	78,	/* voidcall */
+	0,	/* voidcallvirt */
+	84,	/* voidcall_reg */
+	90,	/* voidcall_membase */
+	96,	/* call */
+	102,	/* call_reg */
+	108,	/* call_membase */
+	0,	/* callvirt */
+	114,	/* fcall */
+	0,	/* fcallvirt */
+	120,	/* fcall_reg */
+	126,	/* fcall_membase */
+	132,	/* lcall */
+	0,	/* lcallvirt */
+	138,	/* lcall_reg */
+	144,	/* lcall_membase */
+	150,	/* vcall */
+	0,	/* vcallvirt */
+	156,	/* vcall_reg */
+	162,	/* vcall_membase */
+	168,	/* vcall2 */
+	174,	/* vcall2_reg */
+	180,	/* vcall2_membase */
+	186,	/* dyn_call */
+	192,	/* iconst */
+	0,	/* i8const */
+	198,	/* r4const */
+	204,	/* r8const */
+	0,	/* regvar */
+	0,	/* regoffset */
+	0,	/* vtarg_addr */
+	210,	/* label */
+	216,	/* switch */
+	222,	/* throw */
+	228,	/* rethrow */
+	234,	/* oparglist */
+	240,	/* store_membase_reg */
+	246,	/* storei1_membase_reg */
+	252,	/* storei2_membase_reg */
+	258,	/* storei4_membase_reg */
+	264,	/* storei8_membase_reg */
+	270,	/* storer4_membase_reg */
+	276,	/* storer8_membase_reg */
+	282,	/* store_membase_imm */
+	288,	/* storei1_membase_imm */
+	294,	/* storei2_membase_imm */
+	300,	/* storei4_membase_imm */
+	306,	/* storei8_membase_imm */
+	0,	/* storex_membase */
+	0,	/* storev_membase */
+	312,	/* load_membase */
+	318,	/* loadi1_membase */
+	324,	/* loadu1_membase */
+	330,	/* loadi2_membase */
+	336,	/* loadu2_membase */
+	342,	/* loadi4_membase */
+	348,	/* loadu4_membase */
+	354,	/* loadi8_membase */
+	360,	/* loadr4_membase */
+	366,	/* loadr8_membase */
+	0,	/* loadx_membase */
+	0,	/* loadv_membase */
+	372,	/* load_memindex */
+	378,	/* loadi1_memindex */
+	384,	/* loadu1_memindex */
+	390,	/* loadi2_memindex */
+	396,	/* loadu2_memindex */
+	402,	/* loadi4_memindex */
+	408,	/* loadu4_memindex */
+	0,	/* loadi8_memindex */
+	0,	/* loadr4_memindex */
+	0,	/* loadr8_memindex */
+	414,	/* store_memindex */
+	420,	/* storei1_memindex */
+	426,	/* storei2_memindex */
+	432,	/* storei4_memindex */
+	0,	/* storei8_memindex */
+	0,	/* storer4_memindex */
+	0,	/* storer8_memindex */
+	0,	/* load_mem */
+	0,	/* loadu1_mem */
+	0,	/* loadu2_mem */
+	0,	/* loadi4_mem */
+	438,	/* loadu4_mem */
+	0,	/* loadi8_mem */
+	0,	/* store_mem_imm */
+	444,	/* move */
+	0,	/* lmove */
+	450,	/* fmove */
+	0,	/* vmove */
+	0,	/* vzero */
+	456,	/* add_imm */
+	462,	/* sub_imm */
+	468,	/* mul_imm */
+	0,	/* div_imm */
+	0,	/* div_un_imm */
+	0,	/* rem_imm */
+	0,	/* rem_un_imm */
+	474,	/* and_imm */
+	480,	/* or_imm */
+	486,	/* xor_imm */
+	492,	/* shl_imm */
+	498,	/* shr_imm */
+	504,	/* shr_un_imm */
+	510,	/* br */
+	516,	/* jmp */
+	0,	/* tailcall */
+	522,	/* break */
+	528,	/* ceq */
+	534,	/* cgt */
+	540,	/* cgt.un */
+	546,	/* clt */
+	552,	/* clt.un */
+	558,	/* cond_exc_eq */
+	564,	/* cond_exc_ge */
+	570,	/* cond_exc_gt */
+	576,	/* cond_exc_le */
+	582,	/* cond_exc_lt */
+	588,	/* cond_exc_ne_un */
+	594,	/* cond_exc_ge_un */
+	600,	/* cond_exc_gt_un */
+	606,	/* cond_exc_le_un */
+	612,	/* cond_exc_lt_un */
+	618,	/* cond_exc_ov */
+	624,	/* cond_exc_no */
+	630,	/* cond_exc_c */
+	636,	/* cond_exc_nc */
+	642,	/* cond_exc_ieq */
+	648,	/* cond_exc_ige */
+	654,	/* cond_exc_igt */
+	660,	/* cond_exc_ile */
+	666,	/* cond_exc_ilt */
+	672,	/* cond_exc_ine_un */
+	678,	/* cond_exc_ige_un */
+	684,	/* cond_exc_igt_un */
+	690,	/* cond_exc_ile_un */
+	696,	/* cond_exc_ilt_un */
+	702,	/* cond_exc_iov */
+	708,	/* cond_exc_ino */
+	714,	/* cond_exc_ic */
+	720,	/* cond_exc_inc */
+	0,	/* long_add */
+	0,	/* long_sub */
+	0,	/* long_mul */
+	0,	/* long_div */
+	0,	/* long_div_un */
+	0,	/* long_rem */
+	0,	/* long_rem_un */
+	0,	/* long_and */
+	0,	/* long_or */
+	0,	/* long_xor */
+	0,	/* long_shl */
+	0,	/* long_shr */
+	0,	/* long_shr_un */
+	0,	/* long_neg */
+	0,	/* long_not */
+	0,	/* long_conv_to_i1 */
+	0,	/* long_conv_to_i2 */
+	0,	/* long_conv_to_i4 */
+	0,	/* long_conv_to_i8 */
+	0,	/* long_conv_to_r4 */
+	0,	/* long_conv_to_r8 */
+	0,	/* long_conv_to_u4 */
+	0,	/* long_conv_to_u8 */
+	0,	/* long_conv_to_u2 */
+	0,	/* long_conv_to_u1 */
+	0,	/* long_conv_to_i */
+	0,	/* long_conv_to_ovf_i */
+	0,	/* long_conv_to_ovf_u */
+	0,	/* long_add_ovf */
+	0,	/* long_add_ovf_un */
+	0,	/* long_mul_ovf */
+	0,	/* long_mul_ovf_un */
+	0,	/* long_sub_ovf */
+	0,	/* long_sub_ovf_un */
+	0,	/* long_conv_to_ovf_i1_un */
+	0,	/* long_conv_to_ovf_i2_un */
+	0,	/* long_conv_to_ovf_i4_un */
+	0,	/* long_conv_to_ovf_i8_un */
+	0,	/* long_conv_to_ovf_u1_un */
+	0,	/* long_conv_to_ovf_u2_un */
+	0,	/* long_conv_to_ovf_u4_un */
+	0,	/* long_conv_to_ovf_u8_un */
+	0,	/* long_conv_to_ovf_i_un */
+	0,	/* long_conv_to_ovf_u_un */
+	0,	/* long_conv_to_ovf_i1 */
+	0,	/* long_conv_to_ovf_u1 */
+	0,	/* long_conv_to_ovf_i2 */
+	0,	/* long_conv_to_ovf_u2 */
+	0,	/* long_conv_to_ovf_i4 */
+	0,	/* long_conv_to_ovf_u4 */
+	0,	/* long_conv_to_ovf_i8 */
+	0,	/* long_conv_to_ovf_u8 */
+	0,	/* long_ceq */
+	0,	/* long_cgt */
+	0,	/* long_cgt_un */
+	0,	/* long_clt */
+	0,	/* long_clt_un */
+	0,	/* long_conv_to_r_un */
+	0,	/* long_conv_to_u */
+	0,	/* long_add_imm */
+	0,	/* long_sub_imm */
+	0,	/* long_mul_imm */
+	0,	/* long_and_imm */
+	0,	/* long_or_imm */
+	0,	/* long_xor_imm */
+	0,	/* long_shl_imm */
+	0,	/* long_shr_imm */
+	0,	/* long_shr_un_imm */
+	0,	/* long_div_imm */
+	0,	/* long_div_un_imm */
+	0,	/* long_rem_imm */
+	0,	/* long_rem_un_imm */
+	0,	/* long_beq */
+	0,	/* long_bge */
+	0,	/* long_bgt */
+	0,	/* long_ble */
+	0,	/* long_blt */
+	0,	/* long_bne_un */
+	0,	/* long_bge_un */
+	0,	/* long_bgt_un */
+	0,	/* long_ble_un */
+	0,	/* long_blt_un */
+	0,	/* long_conv_to_r8_2 */
+	0,	/* long_conv_to_r4_2 */
+	0,	/* long_conv_to_r_un_2 */
+	726,	/* long_conv_to_ovf_i4_2 */
+	732,	/* int_add */
+	738,	/* int_sub */
+	744,	/* int_mul */
+	750,	/* int_div */
+	756,	/* int_div_un */
+	762,	/* int_rem */
+	768,	/* int_rem_un */
+	774,	/* int_and */
+	780,	/* int_or */
+	786,	/* int_xor */
+	792,	/* int_shl */
+	798,	/* int_shr */
+	804,	/* int_shr_un */
+	810,	/* int_neg */
+	816,	/* int_not */
+	822,	/* int_conv_to_i1 */
+	828,	/* int_conv_to_i2 */
+	834,	/* int_conv_to_i4 */
+	0,	/* int_conv_to_i8 */
+	840,	/* int_conv_to_r4 */
+	846,	/* int_conv_to_r8 */
+	852,	/* int_conv_to_u4 */
+	0,	/* int_conv_to_u8 */
+	858,	/* int_conv_to_r_un */
+	0,	/* int_conv_to_u */
+	864,	/* int_conv_to_u2 */
+	870,	/* int_conv_to_u1 */
+	0,	/* int_conv_to_i */
+	0,	/* int_conv_to_ovf_i */
+	0,	/* int_conv_to_ovf_u */
+	876,	/* int_add_ovf */
+	882,	/* int_add_ovf_un */
+	888,	/* int_mul_ovf */
+	894,	/* int_mul_ovf_un */
+	900,	/* int_sub_ovf */
+	906,	/* int_sub_ovf_un */
+	0,	/* int_conv_to_ovf_i1_un */
+	0,	/* int_conv_to_ovf_i2_un */
+	0,	/* int_conv_to_ovf_i4_un */
+	0,	/* int_conv_to_ovf_i8_un */
+	0,	/* int_conv_to_ovf_u1_un */
+	0,	/* int_conv_to_ovf_u2_un */
+	0,	/* int_conv_to_ovf_u4_un */
+	0,	/* int_conv_to_ovf_u8_un */
+	0,	/* int_conv_to_ovf_i_un */
+	0,	/* int_conv_to_ovf_u_un */
+	0,	/* int_conv_to_ovf_i1 */
+	0,	/* int_conv_to_ovf_u1 */
+	0,	/* int_conv_to_ovf_i2 */
+	0,	/* int_conv_to_ovf_u2 */
+	0,	/* int_conv_to_ovf_i4 */
+	0,	/* int_conv_to_ovf_u4 */
+	0,	/* int_conv_to_ovf_i8 */
+	0,	/* int_conv_to_ovf_u8 */
+	912,	/* int_adc */
+	918,	/* int_adc_imm */
+	924,	/* int_sbb */
+	930,	/* int_sbb_imm */
+	936,	/* int_addcc */
+	942,	/* int_subcc */
+	948,	/* int_add_imm */
+	954,	/* int_sub_imm */
+	960,	/* int_mul_imm */
+	966,	/* int_div_imm */
+	972,	/* int_div_un_imm */
+	978,	/* int_rem_imm */
+	984,	/* int_rem_un_imm */
+	990,	/* int_and_imm */
+	996,	/* int_or_imm */
+	1002,	/* int_xor_imm */
+	1008,	/* int_shl_imm */
+	1014,	/* int_shr_imm */
+	1020,	/* int_shr_un_imm */
+	1026,	/* int_ceq */
+	1032,	/* int_cgt */
+	1038,	/* int_cgt_un */
+	1044,	/* int_clt */
+	1050,	/* int_clt_un */
+	1056,	/* int_beq */
+	1062,	/* int_bge */
+	1068,	/* int_bgt */
+	1074,	/* int_ble */
+	1080,	/* int_blt */
+	1086,	/* int_bne_un */
+	1092,	/* int_bge_un */
+	1098,	/* int_bgt_un */
+	1104,	/* int_ble_un */
+	1110,	/* int_blt_un */
+	1116,	/* float_beq */
+	1122,	/* float_bge */
+	1128,	/* float_bgt */
+	1134,	/* float_ble */
+	1140,	/* float_blt */
+	1146,	/* float_bne_un */
+	1152,	/* float_bge_un */
+	1158,	/* float_bgt_un */
+	1164,	/* float_ble_un */
+	1170,	/* float_blt_un */
+	1176,	/* float_add */
+	1182,	/* float_sub */
+	1188,	/* float_mul */
+	1194,	/* float_div */
+	1200,	/* float_div_un */
+	1206,	/* float_rem */
+	1212,	/* float_rem_un */
+	1218,	/* float_neg */
+	1224,	/* float_not */
+	1230,	/* float_conv_to_i1 */
+	1236,	/* float_conv_to_i2 */
+	1242,	/* float_conv_to_i4 */
+	1248,	/* float_conv_to_i8 */
+	1254,	/* float_conv_to_r4 */
+	0,	/* float_conv_to_r8 */
+	1260,	/* float_conv_to_u4 */
+	1266,	/* float_conv_to_u8 */
+	1272,	/* float_conv_to_u2 */
+	1278,	/* float_conv_to_u1 */
+	1284,	/* float_conv_to_i */
+	0,	/* float_conv_to_ovf_i */
+	0,	/* float_conv_to_ovd_u */
+	0,	/* float_add_ovf */
+	0,	/* float_add_ovf_un */
+	0,	/* float_mul_ovf */
+	0,	/* float_mul_ovf_un */
+	0,	/* float_sub_ovf */
+	0,	/* float_sub_ovf_un */
+	0,	/* float_conv_to_ovf_i1_un */
+	0,	/* float_conv_to_ovf_i2_un */
+	0,	/* float_conv_to_ovf_i4_un */
+	0,	/* float_conv_to_ovf_i8_un */
+	0,	/* float_conv_to_ovf_u1_un */
+	0,	/* float_conv_to_ovf_u2_un */
+	0,	/* float_conv_to_ovf_u4_un */
+	0,	/* float_conv_to_ovf_u8_un */
+	0,	/* float_conv_to_ovf_i_un */
+	0,	/* float_conv_to_ovf_u_un */
+	0,	/* float_conv_to_ovf_i1 */
+	0,	/* float_conv_to_ovf_u1 */
+	0,	/* float_conv_to_ovf_i2 */
+	0,	/* float_conv_to_ovf_u2 */
+	0,	/* float_conv_to_ovf_i4 */
+	0,	/* float_conv_to_ovf_u4 */
+	0,	/* float_conv_to_ovf_i8 */
+	0,	/* float_conv_to_ovf_u8 */
+	1290,	/* float_ceq */
+	1296,	/* float_cgt */
+	1302,	/* float_cgt_un */
+	1308,	/* float_clt */
+	1314,	/* float_clt_un */
+	0,	/* float_ceq_membase */
+	0,	/* float_cgt_membase */
+	0,	/* float_cgt_un_membase */
+	0,	/* float_clt_membase */
+	0,	/* float_clt_un_membase */
+	1320,	/* float_conv_to_u */
+	1326,	/* ckfinite */
+	0,	/* float_getlow32 */
+	0,	/* float_gethigh32 */
+	0,	/* jump_table */
+	1332,	/* aot_const */
+	0,	/* patch_info */
+	0,	/* got_entry */
+	1338,	/* call_handler */
+	1344,	/* start_handler */
+	1350,	/* endfilter */
+	1356,	/* endfinally */
+	1362,	/* bigmul */
+	1368,	/* bigmul_un */
+	0,	/* int_min_un */
+	0,	/* int_max_un */
+	0,	/* long_min_un */
+	0,	/* long_max_un */
+	0,	/* min */
+	0,	/* max */
+	0,	/* int_min */
+	0,	/* int_max */
+	0,	/* long_min */
+	0,	/* long_max */
+	1374,	/* adc */
+	1380,	/* adc_imm */
+	1386,	/* sbb */
+	1392,	/* sbb_imm */
+	1398,	/* addcc */
+	1404,	/* addcc_imm */
+	1410,	/* subcc */
+	1416,	/* subcc_imm */
+	1422,	/* br_reg */
+	0,	/* sext_i1 */
+	0,	/* sext_i2 */
+	0,	/* sext_i4 */
+	0,	/* zext_i1 */
+	0,	/* zext_i2 */
+	0,	/* zext_i4 */
+	0,	/* cne */
+	0,	/* trunc_i4 */
+	1428,	/* add_ovf_carry */
+	1434,	/* sub_ovf_carry */
+	1440,	/* add_ovf_un_carry */
+	1446,	/* sub_ovf_un_carry */
+	0,	/* sin */
+	0,	/* cos */
+	0,	/* abs */
+	0,	/* tan */
+	0,	/* atan */
+	1452,	/* sqrt */
+	0,	/* round */
+	0,	/* strlen */
+	0,	/* newarr */
+	0,	/* ldlen */
+	0,	/* bounds_check */
+	0,	/* getldelema2 */
+	0,	/* memcpy */
+	0,	/* memset */
+	0,	/* save_lmf */
+	0,	/* restore_lmf */
+	0,	/* card_table_wbarrier */
+	1458,	/* tls_get */
+	0,	/* load_gotaddr */
+	1464,	/* dummy_use */
+	1470,	/* dummy_store */
+	1476,	/* not_reached */
+	1482,	/* not_null */
+	0,	/* xmove */
+	0,	/* xzero */
+	0,	/* xphi */
+	0,	/* atomic_add_i4 */
+	0,	/* atomic_add_new_i4 */
+	0,	/* atomic_add_imm_i4 */
+	0,	/* atomic_add_imm_new_i4 */
+	0,	/* atomic_exchange_i4 */
+	0,	/* atomic_add_i8 */
+	0,	/* atomic_add_new_i8 */
+	0,	/* atomic_add_imm_i8 */
+	0,	/* atomic_add_imm_new_i8 */
+	0,	/* atomic_exchange_i8 */
+	1488,	/* memory_barrier */
+	0,	/* atomic_cas_i4 */
+	0,	/* atomic_cas_i8 */
+	0,	/* cmov_ieq */
+	0,	/* cmov_ige */
+	0,	/* cmov_igt */
+	0,	/* cmov_ile */
+	0,	/* cmov_ilt */
+	0,	/* cmov_ine_un */
+	0,	/* cmov_ige_un */
+	0,	/* cmov_igt_un */
+	0,	/* cmov_ile_un */
+	0,	/* cmov_ilt_un */
+	0,	/* cmov_leq */
+	0,	/* cmov_lge */
+	0,	/* cmov_lgt */
+	0,	/* cmov_lle */
+	0,	/* cmov_llt */
+	0,	/* cmov_lne_un */
+	0,	/* cmov_lge_un */
+	0,	/* cmov_lgt_un */
+	0,	/* cmov_lle_un */
+	0,	/* cmov_llt_un */
+	0,	/* liverange_start */
+	0,	/* liverange_end */
+	1494,	/* arm_rsbs_imm */
+	1500,	/* arm_rsc_imm */
+};
+
diff --git a/platforms/android/include/link.h b/platforms/android/include/link.h
new file mode 100644
index 0000000..e9b02a5
--- /dev/null
+++ b/platforms/android/include/link.h
@@ -0,0 +1,25 @@
+#ifndef _LINK_H_
+#define _LINK_H_
+
+// These structures are needed by libgc
+// They are defined in mydroid/bionic/linker/linker.h, but are expected to be in <link.h>
+struct link_map
+{
+    uintptr_t l_addr;
+    char * l_name;
+    uintptr_t l_ld;
+    struct link_map * l_next;
+    struct link_map * l_prev;
+};
+
+
+struct r_debug
+{
+    int32_t r_version;
+    struct link_map * r_map;
+    void (*r_brk)(void);
+    int32_t r_state;
+    uintptr_t r_ldbase;
+};
+
+#endif
diff --git a/platforms/android/include/linker.h b/platforms/android/include/linker.h
new file mode 100644
index 0000000..68ac275
--- /dev/null
+++ b/platforms/android/include/linker.h
@@ -0,0 +1,239 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _LINKER_H_
+#define _LINKER_H_
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <linux/elf.h>
+
+#undef PAGE_MASK
+#undef PAGE_SIZE
+#define PAGE_SIZE 4096
+#define PAGE_MASK 4095
+
+void debugger_init();
+const char *addr_to_name(unsigned addr);
+
+/* magic shared structures that GDB knows about */
+
+struct link_map
+{
+    uintptr_t l_addr;
+    char * l_name;
+    uintptr_t l_ld;
+    struct link_map * l_next;
+    struct link_map * l_prev;
+};
+
+/* needed for dl_iterate_phdr to be passed to the callbacks provided */
+struct dl_phdr_info
+{
+    Elf32_Addr dlpi_addr;
+    const char *dlpi_name;
+    const Elf32_Phdr *dlpi_phdr;
+    Elf32_Half dlpi_phnum;
+};
+
+
+// Values for r_debug->state
+enum {
+    RT_CONSISTENT,
+    RT_ADD,
+    RT_DELETE
+};
+
+struct r_debug
+{
+    int32_t r_version;
+    struct link_map * r_map;
+    void (*r_brk)(void);
+    int32_t r_state;
+    uintptr_t r_ldbase;
+};
+
+typedef struct soinfo soinfo;
+
+#define FLAG_LINKED     0x00000001
+#define FLAG_ERROR      0x00000002
+#define FLAG_EXE        0x00000004 // The main executable
+#define FLAG_PRELINKED  0x00000008 // This is a pre-linked lib
+
+#define SOINFO_NAME_LEN 128
+
+struct soinfo
+{
+    const char name[SOINFO_NAME_LEN];
+    Elf32_Phdr *phdr;
+    int phnum;
+    unsigned entry;
+    unsigned base;
+    unsigned size;
+    // buddy-allocator index, negative for prelinked libraries
+    int ba_index;
+
+    unsigned *dynamic;
+
+    unsigned wrprotect_start;
+    unsigned wrprotect_end;
+
+    soinfo *next;
+    unsigned flags;
+
+    const char *strtab;
+    Elf32_Sym *symtab;
+
+    unsigned nbucket;
+    unsigned nchain;
+    unsigned *bucket;
+    unsigned *chain;
+
+    unsigned *plt_got;
+
+    Elf32_Rel *plt_rel;
+    unsigned plt_rel_count;
+
+    Elf32_Rel *rel;
+    unsigned rel_count;
+
+#ifdef ANDROID_SH_LINKER
+    Elf32_Rela *plt_rela;
+    unsigned plt_rela_count;
+
+    Elf32_Rela *rela;
+    unsigned rela_count;
+#endif /* ANDROID_SH_LINKER */
+
+    unsigned *preinit_array;
+    unsigned preinit_array_count;
+
+    unsigned *init_array;
+    unsigned init_array_count;
+    unsigned *fini_array;
+    unsigned fini_array_count;
+
+    void (*init_func)(void);
+    void (*fini_func)(void);
+
+#ifdef ANDROID_ARM_LINKER
+    /* ARM EABI section used for stack unwinding. */
+    unsigned *ARM_exidx;
+    unsigned ARM_exidx_count;
+#endif
+
+    unsigned refcount;
+    struct link_map linkmap;
+};
+
+
+extern soinfo libdl_info;
+
+/* these must all be powers of two */
+#ifdef ARCH_SH
+#define LIBBASE 0x60000000
+#define LIBLAST 0x70000000
+#define LIBINC  0x00100000
+#else
+#define LIBBASE 0x80000000
+#define LIBLAST 0x90000000
+#define LIBINC  0x00100000
+#endif
+
+#ifdef ANDROID_ARM_LINKER
+
+#define R_ARM_COPY       20
+#define R_ARM_GLOB_DAT   21
+#define R_ARM_JUMP_SLOT  22
+#define R_ARM_RELATIVE   23
+
+/* According to the AAPCS specification, we only
+ * need the above relocations. However, in practice,
+ * the following ones turn up from time to time.
+ */
+#define R_ARM_ABS32      2
+#define R_ARM_REL32      3
+
+#elif defined(ANDROID_X86_LINKER)
+
+#define R_386_32         1
+#define R_386_PC32       2
+#define R_386_GLOB_DAT   6
+#define R_386_JUMP_SLOT  7
+#define R_386_RELATIVE   8
+
+#elif defined(ANDROID_SH_LINKER)
+
+#define R_SH_DIR32      1
+#define R_SH_GLOB_DAT   163
+#define R_SH_JUMP_SLOT  164
+#define R_SH_RELATIVE   165
+
+#endif /* ANDROID_*_LINKER */
+
+
+#ifndef DT_INIT_ARRAY
+#define DT_INIT_ARRAY      25
+#endif
+
+#ifndef DT_FINI_ARRAY
+#define DT_FINI_ARRAY      26
+#endif
+
+#ifndef DT_INIT_ARRAYSZ
+#define DT_INIT_ARRAYSZ    27
+#endif
+
+#ifndef DT_FINI_ARRAYSZ
+#define DT_FINI_ARRAYSZ    28
+#endif
+
+#ifndef DT_PREINIT_ARRAY
+#define DT_PREINIT_ARRAY   32
+#endif
+
+#ifndef DT_PREINIT_ARRAYSZ
+#define DT_PREINIT_ARRAYSZ 33
+#endif
+
+soinfo *find_library(const char *name);
+unsigned unload_library(soinfo *si);
+Elf32_Sym *lookup_in_library(soinfo *si, const char *name);
+Elf32_Sym *lookup(const char *name, soinfo **found, soinfo *start);
+soinfo *find_containing_library(void *addr);
+Elf32_Sym *find_containing_symbol(void *addr, soinfo *si);
+const char *linker_get_error(void);
+
+#ifdef ANDROID_ARM_LINKER 
+typedef long unsigned int *_Unwind_Ptr;
+_Unwind_Ptr dl_unwind_find_exidx(_Unwind_Ptr pc, int *pcount);
+#elif defined(ANDROID_X86_LINKER) || defined(ANDROID_SH_LINKER)
+int dl_iterate_phdr(int (*cb)(struct dl_phdr_info *, size_t, void *), void *);
+#endif
+
+#endif
diff --git a/platforms/android/include/ucontext.h b/platforms/android/include/ucontext.h
new file mode 100644
index 0000000..6aa2376
--- /dev/null
+++ b/platforms/android/include/ucontext.h
@@ -0,0 +1 @@
+#include <asm/sigcontext.h>
diff --git a/platforms/iPhoneOS/config.sh b/platforms/iPhoneOS/config.sh
new file mode 100644
index 0000000..373d670
--- /dev/null
+++ b/platforms/iPhoneOS/config.sh
@@ -0,0 +1,15 @@
+iphone_sdk_ver=4.2
+
+host=arm-apple-darwin
+target=arm-apple-darwin
+export SDK=/Developer/Platforms/iPhoneOS.platform/Developer
+export SDKROOT=$SDK/SDKs/iPhoneOS${iphone_sdk_ver}.sdk
+#export CC="$SDK/usr/bin/gcc-4.2"
+export CC="$SDK/usr/bin/llvm-gcc-4.2"
+export CXX="$CC"
+export CPP="$SDK/usr/bin/cpp"
+export AR="$SDK/usr/bin/ar"
+export STRIP="$SDK/usr/bin/strip"
+export RANLIB="$SDK/usr/bin/ranlib"
+export CFLAGS="-g -arch armv6 -I$SDKROOT/usr/include -isysroot $SDKROOT -DAPPLE -DIPHONE"
+export LDFLAGS="-arch armv6 -isysroot $SDKROOT"
diff --git a/platforms/iPhoneOS/cross_config.in b/platforms/iPhoneOS/cross_config.in
new file mode 100644
index 0000000..eae23f2
--- /dev/null
+++ b/platforms/iPhoneOS/cross_config.in
@@ -0,0 +1,64 @@
+###
+### YOU ARE TRYING TO CROSS COMPILE ECL.
+### PLEASE FOLLOW THESE INSTRUCTIONS:
+###
+### 1) Vital information cannot be determined at configuration time
+### because we are not able to run test programs. A file called
+###		
+### has been created, that you will have to fill out. Please do
+### it before invoking "configure" again.
+
+### 1.1) Direction of growth of the stack
+ECL_STACK_DIR=up
+
+### 1.2) Choose an integer datatype which is large enough to host a pointer
+CL_FIXNUM_TYPE=int
+CL_FIXNUM_BITS=32
+CL_FIXNUM_MAX=536870911L
+CL_FIXNUM_MIN=-536870912L
+CL_INT_BITS=32
+CL_LONG_BITS=32
+
+### 1.3) Order of bytes within a word
+ECL_BIGENDIAN=no
+
+### 1.4) What characters signal an end of line. May be LF (Linefeed or \n)
+###      CR (Carriage return or \r), and CRLF (CR followed by LF).
+ECL_NEWLINE=LF
+
+### 1.5) Can we guess how many characters are available for reading from
+###      the FILE structure?
+###          0 = no
+###          1 = (f)->_IO_read_end - (f)->_IO_read_ptr
+###          2 = (f)->_r
+###          3 = (f)->_cnt
+ECL_FILE_CNT=0
+
+###
+### 1.6) Other integer types (set to 'no' to disable)
+###
+ECL_STDINT_HEADER="#include <stdint.h>"
+ECL_UINT8_T=uint8_t
+ECL_UINT16_T=uint16_t
+ECL_UINT32_T=uint32_t
+ECL_UINT64_T=no
+ECL_INT8_T=int8_t
+ECL_INT16_T=int16_t
+ECL_INT32_T=int32_t
+ECL_INT64_T=no
+ECL_LONG_LONG_BITS=no
+
+###
+### 1.7) Other features (set to 'no' to disable)
+###
+ECL_WORKING_SEM_INIT=no
+ECL_WORKING_ENVIRON=yes
+
+### 2) To cross-compile ECL so that it runs on the system
+###		arm-linux-eabi
+### you need to first compile ECL on the system in which you are building
+### the cross-compiled files, that is
+###		x86_64-unknown-linux-gnu
+### By default we assume that ECL can be accessed from some directory in
+### the path.
+
diff --git a/platforms/iPhoneSimulator/config.sh b/platforms/iPhoneSimulator/config.sh
new file mode 100644
index 0000000..fe878bc
--- /dev/null
+++ b/platforms/iPhoneSimulator/config.sh
@@ -0,0 +1,40 @@
+iphone_sdk_ver=4.2
+
+host=i386-apple-darwin
+target=i386-apple-darwin
+
+export SDK=/Developer/Platforms/iPhoneSimulator.platform/Developer
+export SDKROOT=$SDK/SDKs/iPhoneSimulator${iphone_sdk_ver}.sdk
+int_sdk_ver=$(echo "(${iphone_sdk_ver} * 100)/1"|bc)
+
+export CC="$SDK/usr/bin/gcc-4.2"
+#export CC="$SDK/usr/bin/llvm-gcc-4.2"
+export CXX="$CC"
+export CPP="$SDK/usr/bin/cpp"
+export AR="$SDK/usr/bin/ar"
+export STRIP="$SDK/usr/bin/strip"
+export RANLIB="$SDK/usr/bin/ranlib"
+
+export CFLAGS=$(echo -g -arch i386 -I$SDKROOT/usr/include \
+    -fmessage-length=0 \
+    -pipe \
+    -std=c99 \
+    -Wno-trigraphs \
+    -fpascal-strings \
+    -fasm-blocks \
+    -O0 \
+    -Wreturn-type \
+    -Wunused-variable \
+    -isysroot $SDKROOT \
+    -fexceptions \
+    -fvisibility=hidden \
+    -mmacosx-version-min=10.6 \
+    -gdwarf-2 \
+    -fobjc-abi-version=2 \
+    -D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 \
+    -D_DARWIN_USE_64_BIT_INODE \
+    -DAPPLE -DIPHONE -DIPHONE_SIMULATOR \
+    -DIPHONE_SDK_VER=${int_sdk_ver})
+export LDFLAGS=$(echo -arch i386 \
+    -isysroot $SDKROOT -mmacosx-version-min=10.6 \
+    -all_load -Xlinker -objc_abi_version -Xlinker 2)
