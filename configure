#!/bin/bash

usage()
{
    echo "Usage: `basename $0` project platform"
    echo ""
    echo " project     -- one of: ecl, mpir, libatomic_ops, bdwgc, libatomic_ops"
    echo " platform    -- one of: host, iPhoneOS, iPhoneSimulator, android, androidx86, nacl_x86_32_glibc, nacl_x86_64_glibc"
}

[ $# == 2 ] || { usage; exit 1; }

project=$1
platform=$2


PROJECT_ROOT=$(cd $(dirname ${0}) && pwd -P)

ECL_INSTALL_ROOT_DIR=$PROJECT_ROOT/local-install
PROJECT_INSTALL_DIR=$ECL_INSTALL_ROOT_DIR/$platform
export PKG_CONFIG_PATH=$PROJECT_INSTALL_DIR/lib/pkgconfig

case $platform in
    nacl*|pnacl)
        template_config=platforms/nacl/cross_config_$platform.in
        ;;
    *)
        template_config=platforms/$platform/cross_config.in
        ;;
esac
cross_compiler_platform=host
host_platform=$($PROJECT_ROOT/config.guess)

builddir=$PROJECT_ROOT/build/$platform/$project

if [ ! -d ${builddir} ] ; then
    echo Creating directory "\`${builddir}'"
    mkdir -p ${builddir}
fi


case $platform in
    host|hostnothreads)
	export CFLAGS="-m32 -g -O2"
	export LDFLAGS="-m32 -g -O2"
	;;
    host*64*)
	;;
    android|androidx86)
	. $PROJECT_ROOT/platforms/android/config.sh $platform || exit 1
	CFLAGS="$CFLAGS -g -O2 -DANDROID -DPLATFORM_ANDROID"
	;;
    iPhoneOS|iPhoneSimulator)
	. $PROJECT_ROOT/platforms/$platform/config.sh || exit 1
	CFLAGS="$CFLAGS -g -O2"
	;;
    nacl*|pnacl)
	. $PROJECT_ROOT/platforms/nacl/config.sh $platform || exit 1
	CFLAGS="$CFLAGS -g -O2 -DNACL"
	;;
    *)
	usage; exit 1
	;;
esac

export CFLAGS
ecl_to_run=$ECL_INSTALL_ROOT_DIR/${cross_compiler_platform}/bin/ecl

case $project in
    ecl)
	srcdir=$PROJECT_ROOT/ecl/src
	CFLAGS="$CFLAGS -I$PROJECT_INSTALL_DIR/include"

	case $platform in
	    nacl*)
#		export LIBS="$LIBS -lpthread -lnosys"
		export LIBS="$LIBS -L$PROJECT_INSTALL_DIR/lib -lgc -lpthread -lnosys"
		;;
	    pnacl)
		export LIBS="$LIBS -L$PROJECT_INSTALL_DIR/lib -lgc -lpthread -lnosys"
		;;
	    *)
		export LIBS="$LIBS -L$PROJECT_INSTALL_DIR/lib -lgc -latomic_ops"
		;;
	esac

	case $platform in
	    android|androidx86|iPhoneOS|iPhoneSimulator)
		(cat $template_config; echo "ECL_TO_RUN=$ecl_to_run") > $builddir/cross_config
		config_opts="\
			--with-cross-config=$builddir/cross_config \
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=yes \
			--disable-longdouble \
			--enable-boehm=system \
			--with-dffi=no \
			--with-cmp=no \
			--with-asdf=builtin \
			--with-bytecmp=builtin \
			--with-serve-event=yes \
			--disable-shared"
		;;

	    nacl*|pnacl)
		(cat $template_config; echo "ECL_TO_RUN=$ecl_to_run") > $builddir/cross_config
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=no \
			--disable-longdouble \
			--enable-boehm=system \
			--with-dffi=no \
			--with-cmp=no \
			--with-asdf=builtin \
			--with-bytecmp=builtin \
			--with-tcp=no \
			--with-serve-event=no \
			--disable-shared"
		;;

	    host)
		export ABI=32
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=yes \
			--disable-longdouble \
        		--enable-boehm=included \
			--with-dffi=no"
		;;

	    hostnothreads)
		export ABI=32
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=no \
			--disable-longdouble \
        		--enable-boehm=included \
			--with-dffi=no"
		;;

	    host64)
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=yes \
			--enable-boehm=system \
			--with-dffi=included"
		;;

	    host64nothreads)
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=no \
			--disable-longdouble \
			--enable-boehm=system \
			--with-dffi=included"
		;;

	    host64nodl)
		config_opts="\
			--with-gmp-prefix=$PROJECT_INSTALL_DIR \
			--enable-threads=yes \
			--enable-boehm=system \
			--with-dffi=no \
			--with-cmp=builtin \
    			--disable-shared"
		;;
	esac
	;;

    mpir)
	srcdir=$PROJECT_ROOT/mpir
	base_config_opts="\
		--enable-gmpcompat \
		--disable-shared"

	case $platform in
	    host|hostnothreads)
		export ABI=32

		config_opts="\
			--with-pic \
			${base_config_opts}"

		# MPIR-2.5.1: must use applenopic on sandybridge
		if [[ "${host_platform}" = *"-apple-darwin"* ]]; then
		    host=core2-apple-darwin
		fi
		;;
	    pnacl)
		export CFLAGS="$CFLAGS -DHAVE_DOUBLE_IEEE_LITTLE_ENDIAN=1"
		host=none-pc-nacl

		config_opts="\
			--with-pic \
			${base_config_opts}"
		;;
	    nacl*x86_32*)
		# export ABI=32
		host=none-pc-nacl # The ASM version compiles for nacl but not on 64 bits

		config_opts="\
			--with-pic \
			${base_config_opts}"
		;;
	    nacl*x86_64*)
		host=none-pc-nacl

		config_opts="\
			--with-pic \
			${base_config_opts}"
		;;
	    host64*)
		config_opts="\
			--with-pic \
			${base_config_opts}"
		;;
	    *)
		config_opts="${base_config_opts}"
		;;
	esac
	;;

    libatomic_ops)
	config_opts="--disable-shared"
	srcdir=$PROJECT_ROOT/libatomic_ops
	;;
    bdwgc)
	srcdir=$PROJECT_ROOT/bdwgc
	case $platform in
	    host)
		export CFLAGS="$CFLAGS -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -fPIC -D_THREAD_SAFE"
		config_opts="\
			--disable-shared \
			--enable-large-config \
			--enable-handle-fork=no \
			--enable-threads=posix"
		;;
	    android*)
		export CFLAGS="$CFLAGS -DUSE_GET_STACKBASE_FOR_MAIN -DIGNORE_DYNAMIC_LOADING -DGC_LINUX_THREADS -D_REENTRANT"
		config_opts="\
			--disable-shared \
			--enable-large-config \
			--enable-handle-fork=no \
			--enable-threads=posix"
		;;
	    nacl*)
                CFLAGS="$CFLAGS -D_GNU_SOURCE"
		config_opts="\
			--disable-shared \
			--enable-large-config \
			--enable-handle-fork=no \
			--enable-threads=no"
		srcdir=$PROJECT_ROOT/nacl/libgc
		;;
	    pnacl)
                CFLAGS="$CFLAGS -D_GNU_SOURCE"
		config_opts="\
			--disable-shared \
			--enable-large-config \
			--enable-handle-fork=no \
			--enable-threads=no"
		srcdir=$PROJECT_ROOT/nacl/libgc
		;;
	esac
	;;
    *)
	usage; exit 1
	;;
esac

if [ ! -f ${srcdir}/configure ] ; then
    echo "Running autogen.sh in ${srcdir} (autotools needed)"
    (cd ${srcdir} && ./autogen.sh)
fi


cd ${builddir}
${srcdir}/configure --srcdir=${srcdir} --prefix=$PROJECT_INSTALL_DIR --target=${host} --host=${host} ${config_opts}

if [[ $? == 0 ]]; then
    echo "$project configured in ${builddir}."
    echo "To build do:"
    echo "cd ${builddir}; make && make install"
fi
