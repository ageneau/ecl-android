# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

VALID_TOOLCHAINS := newlib glibc
NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../../..)
NACL_SRC ?= $(NACL_PORTS)/src
NACLPORTS_PREFIX ?= 

include $(NACL_SDK_ROOT)/tools/common.mk

# Overriding this to remove -Werror
NACL_CFLAGS := -Wno-long-long
NACL_CXXFLAGS := -Wno-long-long

ECL_ROOT_INSTALL_DIR:=../../../local-install

ECL_ROOT_HOST=$(ECL_ROOT_INSTALL_DIR)/hostnothreads
ECL_ROOT_X86_32=$(ECL_ROOT_INSTALL_DIR)/nacl_$(NACL_ARCH)_$(TOOLCHAIN)
ECL_ROOT_X86_64=$(ECL_ROOT_INSTALL_DIR)/nacl_$(NACL_ARCH)_$(TOOLCHAIN)
ECL_ROOT_PNACL=$(ECL_ROOT_INSTALL_DIR)/pnacl

ECL_VER := $(shell basename $(ECL_ROOT_HOST)/lib/ecl-* |cut -d "-" -f2)

ECL_LIBS_X86_32=-L$(ECL_ROOT_X86_32)/lib -lecl -lgmp -lgc -L$(ECL_ROOT_X86_32)/lib/ecl-$(ECL_VER) -lasdf -lecl-cdb -lecl-help
ECL_LIBS_X86_64=-L$(ECL_ROOT_X86_64)/lib -lecl -lgmp -lgc -L$(ECL_ROOT_X86_64)/lib/ecl-$(ECL_VER) -lasdf -lecl-cdb -lecl-help
ECL_LIBSPNACL=-L$(ECL_ROOT_PNACL)/lib -lecl -lgmp -lgc -L$(ECL_ROOT_PNACL)/lib/ecl-$(ECL_VER) -lasdf -lecl-cdb -lecl-help


TARGET = ecl
LIBS = ppapi_simple nacl_io ppapi_cpp ppapi tar
ifeq ($(TOOLCHAIN),glibc)
LIBS += util dl
NACL_LDFLAGS += -Wl,-export-dynamic
else
LIBS += c glibc-compat
endif
SOURCES = ecl.c ecl_main.c
INC_PATHS = $(NACL_SDK_ROOT)/include
INSTALL_DIR = publish/$(TOOLCHAIN)

X86_32_CFLAGS += -DNACL -I$(ECL_ROOT_X86_32)/include
X86_64_CFLAGS += -DNACL -I$(ECL_ROOT_X86_64)/include

X86_32_LDFLAGS += $(ECL_LIBS_X86_32)
X86_64_LDFLAGS += $(ECL_LIBS_X86_64)

ifeq ($(TOOLCHAIN),pnacl)
EXEEXT=.pexe
else
EXEEXT=.nexe
endif

ifneq ($(TOOLCHAIN),pnacl)
# We want the nmf to contain all the .nexe we have previously
# built as well as the one currently being built, so we modify
# the list of executables that we pass to create_nmf.
EXECUTABLES += $(wildcard $(OUTDIR)/$(TARGET)_x86_64$(EXEEXT))
EXECUTABLES += $(wildcard $(OUTDIR)/$(TARGET)_x86_32$(EXEEXT))
EXECUTABLES += $(wildcard $(OUTDIR)/$(TARGET)_arm$(EXEEXT))
endif

# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))

ifeq ($(TOOLCHAIN),glibc)
EXTRA_ASSETS =
endif

CHROMEAPPS = $(NACL_SRC)/libraries/hterm/src
LIB_DOT = $(CHROMEAPPS)/libdot
NASSH = $(CHROMEAPPS)/nassh

install:
	mkdir -p $(INSTALL_DIR)
	tar -h -c -f $(INSTALL_DIR)/ecldata_$(NACL_ARCH).tar init.lisp ${EXTRA_ASSETS} -C ../../../local-install/nacl_$(NACL_ARCH)_$(TOOLCHAIN)/ lib
	LIBDOT_SEARCH_PATH=$(CHROMEAPPS) $(LIB_DOT)/bin/concat.sh -i $(NASSH)/concat/nassh_deps.concat -o $(INSTALL_DIR)/hterm.concat.js
	cp $(OUTDIR)/ecl*$(EXEEXT) $(INSTALL_DIR)
	rm -f $(INSTALL_DIR)/*_unstripped_*$(EXEEXT)
	cp $(OUTDIR)/ecl.nmf $(INSTALL_DIR)
	cp index.html $(INSTALL_DIR)
	cp ecl.js $(INSTALL_DIR)
	cp $(NACL_SRC)/build_tools/naclterm.js $(INSTALL_DIR)
	cp manifest.json ${INSTALL_DIR}
	cp background.js ${INSTALL_DIR}
	cp icon_16.png ${INSTALL_DIR}
	cp icon_48.png ${INSTALL_DIR}
	cp icon_128.png ${INSTALL_DIR}
ifeq ($(TOOLCHAIN),pnacl)
	sed -i 's/x-nacl/x-pnacl/g' $(INSTALL_DIR)/naclterm.js
endif
ifeq ($(TOOLCHAIN),glibc)
	cp -r $(OUTDIR)/lib* $(INSTALL_DIR)
endif
	cd $(INSTALL_DIR) && zip -r ecl.zip .
